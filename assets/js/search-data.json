{
  
    
        "post0": {
            "title": "Exploratory Data Analysis of Airbnb Accommodation in Copenhagen",
            "content": ". Note: Code sections can be made visible by using the provided buttons throughout this project . 1.0 ABSTRACT . In this project, we investigate Airbnb host listings in Copenhagen in special regard to their area of location, and what attributes are associated with them. We strive, to describe the Copenhagen landscape and the accommodation services provided by Airbnb. The goal is to create a report, that can help customers guide their decision in relation to where to book their stay while in Copenhagen, and in relation to the experience they expect for their stay. . We aim to answer our research question: How can Airbnb ensure matches and the experiences they create are positive for their customers (users), and providers (hosts)? Moreover, how can Airbnb help guide user decisions to create successful matches and positive experiences? . This paper presents an exploratory data analysis using various data processing techniques and visualization tools found in the seaborn, plotly express and matplotlib pyplot libraries for python. The analysis was conduction with special focus on how location areas affect number of listings provided on the platform, pricing, property types and room types. From our analysis we found that Brønshøj-Husum might be particular interesting families that wish to book into an entire house. . Moreover, this paper displays techniques for visualizing word strings into wordclouds and how geospatial data can be presented in an interactive manner to improve understanding of the features in the data. . 2.0 INTRODUCTION . Since 2008, Airbnb has grown from a small accommodation platform, hosted in San Francisco, to one that is now recognised throughout the world. Airbnb has revolutionized the tourism housing industry by applying a sharing economy model to the accommodation business. Today, Airbnb has become the world’s largest accommodation service provider with more accommodation options than any other accommodation business - and even more than all of them combined. As a platform, Airbnb enables people (hosts) to offer accommodation services to other people (guests), providing guests with a more unique and personalized way of experiencing the world, and often at a reasonably lower price than other accommodation options. Only just a fraction (20%) of these transactions are captured by Airbnb, which in 2019 returned 4,7 billion USD in sales revenues. . 2.1 Problem Formulation and Research Question . Data plays a key role in Airbnb’s success. For instance, data enables Airbnb to match guests and hosts and further allows the users to filter the host listings to their likings, in respect of pricing, location, number of beds, and much more. Thereby, data is essential to securing high customer satisfaction. Moreover, Airbnb can use the collected data to extract insights that can be used to improve their service offerings, guide decision making, guide marketing initiatives, and more. . As a platform, Airbnb’s sole value creation lies in creating successful matches between guests and hosts and by ensuring a positive experience for both parties. Naturally, if the platform fails to deliver a positive experience to a user, the user might neglect the platform in total, resulting in negative feedback loops. This leads us to our research question: . How can Airbnb ensure matches and the experiences they create are positive for their customers (users), and providers (hosts)? Moreover, how can Airbnb help guide user decisions to create successful matches and positive experiences? . Currently, Airbnb helps the users to create meaningful matches, by allowing the guests to limit their search for accommodation by different attributes related to the individual host listing. As such, users can easily find accommodation that meets their basic needs for accommodation; e.g. number of beds, bedrooms, price, room type, etc. However, without any knowledge of the different location areas, guests might find difficulty in choosing a location that suits their needs. . In this project, we will examine the accommodation services, listed on Airbnb for Copenhagen, in special regard to the location areas, and the attributes that are associated with them. The goal is to create a report that can guide customers to choose a location that lives up to their expectations, thereby improving the quality of the matches provided by the platform. . 3.0 METHODOLOGY . 3.1 Dataset Analysis Process . To answer the question of interest, we perform an exploratory data analysis (EDA) to gain an understanding of what features that seperates and defines neighbourhoods and the differences in their accommodation offerings. More specifically, we will zoom in on the neighbourhoods with respect to which type of room and property that are most common in the area, and how the neighbourhood affect the listing price. Moreover, the price for accommodating one person is calculated to provide an indication of wealth. . Moving on, we create an interactive map that displays each individual accommodation offering in a geospatial visualization. Through interaction the map allows the user to easily find listings, view that most expensivest listings and display where each neighbourhood is located. Furthermore, the interactivity enables zooming, moving and filtering of the data to enhance the understanding of the geospace. . Finally, we create wordcloud visualizations to display how hosts are descriping the neighbourhoods, that allows us to get a sense of which words that best describes the location areas. . 3.2 Dataset Description . The data was downloaded from the independent site: Inside Airbnb, which scrapes data from Airbnb, and makes it puplicly available for analysis. This site provides a multitude of datasets containing information on the most populated cities around the world - including Copenhagen. . The datasets provided by Inside Airbnb is as follows: (1) listings, (2) calendar, (3) reviews, (4) listings_summary, (5) reviews_summary. . We have downloaded and inspected all of the datasets. However, only the listings are assessed to be important for this project. . The most recent data set is used, which was scraped on 28th of Nov. 2020. . The listings dataset contains data about the airbnb host listings and their respective attributes. In total, there are 74 columns describing 8636 listings on the Airbnb platform. However, for this project, the following 17 attributes has been selected for analysis: . id: primary key (listings_id) | name: name of listing | description: room description | neighbourhood_overview: text description of the neighbourhood | neightbourhood_cleansed: location area cleaned from special charaters | latitude: latitude | longitude: longitude | property_type: type of the property where the room is in | room_type: type of room that is made available | accommodates: max number of people that can stay at a time | beds: number of beds in the room | bedrooms: number of bedrooms in the room | ammenties: facilities available | price: price of the room per day | number_of_reviews: number of times the listing was reviewed | review_scores_rating: average review score of the listing | . 3.3 Preprocessing Steps . As usual, before we can initialize the data exploration, we will need to preprocess the data. Overall the preprocessing will follow the following structure: . Install and Import libraries | Gather data | Data Cleaning | By utilizing the pandas library, we download and unzip the data using pandas built-in decompression tool, and then using it to create dataframes that stores the data, enabling data cleaning and manipulation. We clean the data by selecting only the 17 columns as listed previously, checking for misclassified datatypes and renaming columns and values to ease interpretation of the data. . Without further ado, let&#39;s get started! . 4.0 PROCESSING THE DATA . In this section, we will process and clean the data before initiating the exploratory data analysis. . This project is created in a colab notebook and exported to fastpages for improved readability and interactive features such as the code button provided bellow. You will find these buttons throughout this paper, however some code snippets has been hidden entirely. . If you wish to review the full line of code, please see the buttons under the headline of this post. . 4.1 Install and Import Libraries . import pandas as pd #used to store and manage the data import numpy as np import matplotlib.pyplot as plt #visualization library import plotly.express as px #visualization library used for geospatial data import seaborn as sns #Wordcloud related libraries from os import path from PIL import Image from wordcloud import WordCloud, STOPWORDS, ImageColorGenerator . We initiate our data analysis by installing and importing the libraries for our python interpreter. For this project, we use pandas, pyplot, express, WordCloud, STOPWORDS, and ImageColorGenerator. These libraries enables us to clean and process the data and later to create meaningful visualizations. . 4.2 Gathering the Data . #Create DataFrames listings = pd.read_csv(&#39;http://data.insideairbnb.com/denmark/hovedstaden/copenhagen/2020-11-28/data/listings.csv.gz&#39;, compression=&#39;gzip&#39;) listings = listings.iloc[:,[0,4,5,6,27,29,30,31,32,33,36,37,38,39,55,59,60]] . The dataset is downloaded, unzipped and stored in a dataframe using pandas. Again using pandas, the irrelevant columns are dropped, thereby only the columns chosen for this project remains. . Now that, we have gathered the data, let us take a quick glimpse on the data: . listings.head(3) . id name description neighborhood_overview neighbourhood_cleansed latitude longitude property_type room_type accommodates bedrooms beds amenities price number_of_reviews last_review review_scores_rating . 0 6983 | Copenhagen &#39;N Livin&#39; | Lovely apartment located in the hip Nørrebro a... | Nice bars and cozy cafes just minutes away, ye... | Nrrebro | 55.68798 | 12.54571 | Private room in apartment | Private room | 2 | 1.0 | 1.0 | [&quot;Hot water&quot;, &quot;Refrigerator&quot;, &quot;Heating&quot;, &quot;Stov... | $361.00 | 168 | 2019-07-19 | 96.0 | . 1 26057 | Lovely house - most attractive area | Our lovely house in the center of the city is ... | The neighborhood is the most famous one and th... | Indre By | 55.69163 | 12.57459 | Entire house | Entire home/apt | 6 | 4.0 | 4.0 | [&quot;Kitchen&quot;, &quot;Essentials&quot;, &quot;Cooking basics&quot;, &quot;I... | $2,400.00 | 50 | 2019-12-14 | 98.0 | . 2 29118 | Best Location in Cool Istedgade | &lt;b&gt;The space&lt;/b&gt;&lt;br /&gt;The apartment is situate... | NaN | Vesterbro-Kongens Enghave | 55.67069 | 12.55430 | Entire apartment | Entire home/apt | 2 | 1.0 | 1.0 | [&quot;Hot water&quot;, &quot;Changing table&quot;, &quot;Refrigerator&quot;... | $725.00 | 22 | 2019-08-02 | 98.0 | . listings.info() . &lt;class &#39;pandas.core.frame.DataFrame&#39;&gt; RangeIndex: 8636 entries, 0 to 8635 Data columns (total 17 columns): # Column Non-Null Count Dtype -- -- 0 id 8636 non-null int64 1 name 8635 non-null object 2 description 8396 non-null object 3 neighborhood_overview 4936 non-null object 4 neighbourhood_cleansed 8636 non-null object 5 latitude 8636 non-null float64 6 longitude 8636 non-null float64 7 property_type 8636 non-null object 8 room_type 8636 non-null object 9 accommodates 8636 non-null int64 10 bedrooms 8440 non-null float64 11 beds 8584 non-null float64 12 amenities 8636 non-null object 13 price 8636 non-null object 14 number_of_reviews 8636 non-null int64 15 last_review 7337 non-null object 16 review_scores_rating 7230 non-null float64 dtypes: float64(5), int64(3), object(9) memory usage: 1.1+ MB . listings.isnull().sum() . id 0 name 1 description 240 neighborhood_overview 3700 neighbourhood_cleansed 0 latitude 0 longitude 0 property_type 0 room_type 0 accommodates 0 bedrooms 196 beds 52 amenities 0 price 0 number_of_reviews 0 last_review 1299 review_scores_rating 1406 dtype: int64 . listings.shape . (8636, 17) . From the quick glimpse, we see that not all hosts are providing a description of the neighbourhood that the listing is located at (the values appear as missing (NaN). In fact, 3700 listings appear without a description of the neighbourhood. . We find that, in the cleansed neighbourhood attribute letter &#39;ø&#39; has been removed from the name. . The Price attribute is listed as USD marked by a &#39;$&#39;, however the listing price should be denoted as DKK. Moreover, the price is interpreted as an object instead of an integer-value. Similarly, &#39;bedrooms&#39; and &#39;beds&#39; are interpreted as float types instead of intergers. Additionally, the last_review attribute should be classified as a datatime type. . 4.3 Data Cleaning . Lets try to correct the above mentioned data anomali. . We start by removing renaming the columns, and then the neighbourhood names to be easier interpretable. To correct the datatypes, some actions has to happen beforehand. For the pricing, the &#39;$&#39; and &#39;,&#39; is removed before correcting the data type. For beds and bedrooms, the missing values are filled with a zero, under the assumption, that these listings are available but does not offer either a bed or a bedroom. . #Rename columns listings.rename(columns={&#39;id&#39;:&#39;listing_id&#39;, &#39;name&#39;:&#39;listing_name&#39;, &#39;description&#39;:&#39;listing_description&#39;, &#39;neighborhood_overview&#39;:&#39;neighbourhood_description&#39;, &#39;neighbourhood_cleansed&#39;:&#39;neighbourhood&#39;}, inplace=True) #Rename Neighbourhood Values listings[&#39;neighbourhood&#39;] = listings.neighbourhood.replace( { &#39;Nrrebro&#39;:&#39;Nørrebro&#39;, &#39;sterbro&#39;:&#39;Østerbro&#39;, &#39;Amager st&#39;: &#39;Amager Øst&#39;, &#39;Vanlse&#39;: &#39;Vanløse&#39;, &#39;Brnshj-Husum&#39;:&#39;Brønshøj-Husum&#39; } ) #Fill missing values cols = [&#39;beds&#39;,&#39;bedrooms&#39;] listings[cols] = listings[cols].fillna(&#39;0&#39;) #Correct DataTypes listings = listings.astype( { &#39;bedrooms&#39;:int, &#39;beds&#39;:int, &#39;last_review&#39;:&#39;datetime64[ns]&#39; } ) #Correct Prices from $ to DKK, then DataType listings.price = listings.price.str.replace(&#39;,&#39;,&#39;&#39;) listings.price = listings.price.str.replace(&#39;$&#39;,&#39;&#39;) listings.price = listings.price.astype(float) clean = listings . We should now have clean data, that we can use to analyze the attributes of the listings. Let&#39;s end the data preprocessing, by assessing the cleaned dataframe: . clean.head() . listing_id listing_name listing_description neighbourhood_description neighbourhood latitude longitude property_type room_type accommodates bedrooms beds amenities price number_of_reviews last_review review_scores_rating . 0 6983 | Copenhagen &#39;N Livin&#39; | Lovely apartment located in the hip Nørrebro a... | Nice bars and cozy cafes just minutes away, ye... | Nørrebro | 55.68798 | 12.54571 | Private room in apartment | Private room | 2 | 1 | 1 | [&quot;Hot water&quot;, &quot;Refrigerator&quot;, &quot;Heating&quot;, &quot;Stov... | 361.0 | 168 | 2019-07-19 | 96.0 | . 1 26057 | Lovely house - most attractive area | Our lovely house in the center of the city is ... | The neighborhood is the most famous one and th... | Indre By | 55.69163 | 12.57459 | Entire house | Entire home/apt | 6 | 4 | 4 | [&quot;Kitchen&quot;, &quot;Essentials&quot;, &quot;Cooking basics&quot;, &quot;I... | 2400.0 | 50 | 2019-12-14 | 98.0 | . 3 31094 | Very central and cozy, new kitchen | &lt;b&gt;The space&lt;/b&gt;&lt;br /&gt;Welcome to our home, we ... | What else is nearby?&lt;br /&gt;To be honest, I thin... | Vesterbro-Kongens Enghave | 55.66744 | 12.55516 | Entire apartment | Entire home/apt | 3 | 1 | 3 | [&quot;TV&quot;, &quot;Heating&quot;, &quot;Kitchen&quot;, &quot;Wifi&quot;, &quot;Cable TV&quot;] | 750.0 | 17 | 2017-08-25 | 97.0 | . 5 37159 | Unique space on greatest location | Situated in the arty Nansensgade quarters and... | Our neighborhood is just the great and quit, b... | Indre By | 55.68572 | 12.56749 | Entire apartment | Entire home/apt | 4 | 2 | 3 | [&quot;Dedicated workspace&quot;, &quot;Heating&quot;, &quot;Iron&quot;, &quot;Ha... | 2369.0 | 11 | 2017-08-22 | 100.0 | . 10 69440 | Clean room in peacefull part of Cph | Adorable apartment in peaceful, green and old-... | The green and old-fashion Frederiksberg is the... | Frederiksberg | 55.68575 | 12.53567 | Private room in apartment | Private room | 1 | 1 | 1 | [&quot;Dryer&quot;, &quot;Hot water&quot;, &quot;Refrigerator&quot;, &quot;Heatin... | 318.0 | 46 | 2019-06-01 | 97.0 | . 5.0 EXPLORATORY DATA PROCESSING . So far so good, now it is time to perform some exploratory data analysis on the data. . We start of by exploring the neighbourhoods of copenhagen and how they compare in relation to pricing: . 5.1 Understanding Neighbourhoods and The Pricing Landscape . 5.1.1 Neighbourhoods in Copenhagen . neighbourhoods = listings[[&#39;neighbourhood&#39;]].value_counts().to_frame(name=&#39;total_listings&#39;).reset_index() #Viz plt.figure(figsize= (10, 10)) plt.style.use(&#39;ggplot&#39;) sns.barplot(neighbourhoods.total_listings, neighbourhoods.neighbourhood) plt.title(&#39;Accommodation Options Split by Location Area&#39;, fontdict= {&#39;fontsize&#39;: 24}) plt.xlabel(&#39;Number of Accomoddation Options&#39;, fontdict= {&#39;fontsize&#39;: 18}) plt.tick_params(labelsize= 16) plt.savefig(&#39;categories_top_20.png&#39;) . /usr/local/lib/python3.6/dist-packages/seaborn/_decorators.py:43: FutureWarning: Pass the following variables as keyword args: x, y. From version 0.12, the only valid positional argument will be `data`, and passing other arguments without an explicit keyword will result in an error or misinterpretation. . 5.1.2 Neighbourhood Accommodation Prices . price_nh = clean.groupby(&#39;neighbourhood&#39;).price.mean().to_frame().sort_values(by=&#39;price&#39;, ascending=False).reset_index() #Viz plt.figure(figsize= (10, 10)) plt.style.use(&#39;ggplot&#39;) sns.barplot(price_nh.price, price_nh.neighbourhood) plt.title(&#39;Accommodation Prices, split by Location area&#39;, fontdict= {&#39;fontsize&#39;: 24}) #plt.yscale(&#39;log&#39;) plt.tick_params(labelsize= 16) plt.savefig(&#39;categories_top_20.png&#39;) . /usr/local/lib/python3.6/dist-packages/seaborn/_decorators.py:43: FutureWarning: Pass the following variables as keyword args: x, y. From version 0.12, the only valid positional argument will be `data`, and passing other arguments without an explicit keyword will result in an error or misinterpretation. . 5.1.2 Per-Person Accommodation Price . #Calculate Average Price Per Person accommodations[&#39;price&#39;] = price_nh.price accommodations[&#39;price_perPerson&#39;] = accommodations.price/accommodations.avg_accommodation accommodations = accommodations.sort_values(by=&#39;price_perPerson&#39;, ascending=False) #Viz plt.figure(figsize= (10, 10)) plt.style.use(&#39;ggplot&#39;) sns.barplot(accommodations.price_perPerson, accommodations.neighbourhood) plt.title(&#39;Price per Person, split by Location area&#39;, fontdict= {&#39;fontsize&#39;: 24}) #plt.yscale(&#39;log&#39;) plt.tick_params(labelsize= 16) plt.savefig(&#39;categories_top_20.png&#39;) . /usr/local/lib/python3.6/dist-packages/seaborn/_decorators.py:43: FutureWarning: Pass the following variables as keyword args: x, y. From version 0.12, the only valid positional argument will be `data`, and passing other arguments without an explicit keyword will result in an error or misinterpretation. . 5.1.3 Conclusion on the Analysis of Neighbourhoods . By looking at the distribution of neighbourhoods it becomes evident that accommodation services as listed by the hosts are mostly situated in the inner city and the farther away you travel from the city center, the less listings can be expected on the platform. This proves great potential for guests that want a truly central location. . Unsurprisingly, the prices also tend to be higher the close we get to the city center. . To our surprise, however, if the guest travels in groups of other people, the per-person-price looks somewhat different. The average per-person-price, ranges between 200 and 400 DKK. In relation to this, the city center seems like a viable place to stay with a per-person-price of just around 250 kr. . 5.2 Analyzing Property Types and Respective Pricing . 5.2.1 Property Types in Copenhagen . properties = clean[[&#39;property_type&#39;]].value_counts().to_frame(name=&#39;listings&#39;).reset_index() #viz plt.figure(figsize= (25, 15)) plt.style.use(&#39;ggplot&#39;) sns.barplot(properties.listings[:20], properties.property_type[:20]) plt.title(&#39;Top 20 Accommodation Options Split by Property Type, log_scale&#39;, fontdict= {&#39;fontsize&#39;: 24}) plt.xlabel(&#39;Number of Accomoddation Options&#39;, fontdict= {&#39;fontsize&#39;: 18}) plt.xscale(&#39;log&#39;) plt.tick_params(labelsize= 16) plt.savefig(&#39;categories_top_20.png&#39;) . /usr/local/lib/python3.6/dist-packages/seaborn/_decorators.py:43: FutureWarning: Pass the following variables as keyword args: x, y. From version 0.12, the only valid positional argument will be `data`, and passing other arguments without an explicit keyword will result in an error or misinterpretation. . 5.2.2 Property Types by Neighbourhood . #Select properties listed more than 400 times listings_clean = clean[clean.property_type.isin([&#39;Entire apartment&#39;,&#39;Private room in apartment&#39;,&#39;Entire condominium&#39;,&#39;Entire house&#39;])] #Count number of listings in neighbourhoods by property type propertyCount = listings_clean.groupby([&#39;neighbourhood&#39;,&#39;property_type&#39;]).neighbourhood.count().to_frame(name = &#39;listings&#39;).reset_index() #Sum number of listings per neighbourhood propertyCount = propertyCount.merge(neighbourhoods, on=&#39;neighbourhood&#39;) #Calculate ratio of property types in the different neighbourhoods propertyCount[&#39;property_ratio&#39;] = propertyCount[&#39;listings&#39;]/propertyCount[&#39;total_listings&#39;] propertyRatio = propertyCount propertyRatio.head(10) #Viz plt.figure(figsize= (25, 15)) plt.style.use(&#39;ggplot&#39;) sns.barplot(y=&#39;property_ratio&#39;, x=&#39;property_type&#39;, hue=&#39;neighbourhood&#39;, data=propertyRatio) plt.title(&#39;Ratio of Property Type, split by location area&#39;, fontdict= {&#39;fontsize&#39;: 24}) plt.xlabel(&#39;Property Type&#39;, fontdict= {&#39;fontsize&#39;: 18}) plt.tick_params(labelsize= 16) plt.savefig(&#39;categories_top_20.png&#39;) . 5.2.2 Property Type Accommodation Price . propertyPricing = listings_clean.groupby(&#39;property_type&#39;).price.mean().to_frame().sort_values(by=&#39;price&#39;, ascending=False).reset_index() #Viz plt.figure(figsize= (10, 10)) plt.style.use(&#39;ggplot&#39;) sns.barplot(propertyPricing.price, propertyPricing.property_type) plt.title(&#39;Accommodation Prices, split by Property Type&#39;, fontdict= {&#39;fontsize&#39;: 24}) #plt.yscale(&#39;log&#39;) plt.tick_params(labelsize= 16) plt.savefig(&#39;categories_top_20.png&#39;) . /usr/local/lib/python3.6/dist-packages/seaborn/_decorators.py:43: FutureWarning: Pass the following variables as keyword args: x, y. From version 0.12, the only valid positional argument will be `data`, and passing other arguments without an explicit keyword will result in an error or misinterpretation. . 5.2.3 Conclusion on the Analysis of Property Types . Looking at the property types, we find that apartments are most often listen on Airbnb, either as a private room or the entire apartment. It comes to no surprise, that pricings vary by property type, with with private rooms in apartments being the cheepest with a flat 600 kr fee per night. In relation an entire apartment can be rented for just below an average of 1200 kr. per night. . Going, further into the data, we look at how the ratios between the property types varies. We notice that for Brønshøj-Husum and Vanløse a great deal of the listings are entire houses, while the ratio in these cities for entire apartments are relatively low. This could imply, that these to neighbourhoods are more family friendly. . 5.3 Investigating Room Types . 5.3.1 Room Types in Copenhagen . rooms = clean[[&#39;room_type&#39;]].value_counts().to_frame(name=&#39;listings&#39;).reset_index() #Viz plt.figure(figsize= (10, 10)) plt.style.use(&#39;ggplot&#39;) sns.barplot(rooms.room_type, rooms.listings) plt.title(&#39;Accommodation Options Split by Room Type, log_scale&#39;, fontdict= {&#39;fontsize&#39;: 24}) plt.yscale(&#39;log&#39;) plt.tick_params(labelsize= 16) plt.savefig(&#39;categories_top_20.png&#39;) . /usr/local/lib/python3.6/dist-packages/seaborn/_decorators.py:43: FutureWarning: Pass the following variables as keyword args: x, y. From version 0.12, the only valid positional argument will be `data`, and passing other arguments without an explicit keyword will result in an error or misinterpretation. . 5.3.2 Room Types by Neighbourhood . #Count number of listings in neighbourhoods by property type roomCount = clean.groupby([&#39;neighbourhood&#39;,&#39;room_type&#39;]).neighbourhood.count().to_frame(name = &#39;listings&#39;).reset_index() #Sum number of listings per neighbourhood roomCount = roomCount.merge(neighbourhoods, on=&#39;neighbourhood&#39;) #Calculate ratio of property types in the different neighbourhoods roomCount[&#39;room_ratio&#39;] = roomCount[&#39;listings&#39;]/roomCount[&#39;total_listings&#39;] roomRatio = roomCount #Viz plt.figure(figsize= (25, 15)) plt.style.use(&#39;ggplot&#39;) sns.barplot(y=&#39;room_ratio&#39;, x=&#39;room_type&#39;, hue=&#39;neighbourhood&#39;, data=roomRatio) plt.title(&#39;Ratio of Room Type, split by location area&#39;, fontdict= {&#39;fontsize&#39;: 24}) plt.xlabel(&#39;Room Type&#39;, fontdict= {&#39;fontsize&#39;: 18}) plt.tick_params(labelsize= 16) plt.savefig(&#39;categories_top_20.png&#39;) . 5.3.3 Room Type Accommodation Prices . roomPricing = listings.groupby(&#39;room_type&#39;).price.mean().to_frame().sort_values(by=&#39;price&#39;, ascending=False).reset_index() #Viz plt.figure(figsize= (10, 10)) plt.style.use(&#39;ggplot&#39;) sns.barplot(roomPricing.price, roomPricing.room_type) plt.title(&#39;Accommodation Prices, split by Room Type&#39;, fontdict= {&#39;fontsize&#39;: 24}) #plt.yscale(&#39;log&#39;) plt.tick_params(labelsize= 16) plt.savefig(&#39;categories_top_20.png&#39;) . /usr/local/lib/python3.6/dist-packages/seaborn/_decorators.py:43: FutureWarning: Pass the following variables as keyword args: x, y. From version 0.12, the only valid positional argument will be `data`, and passing other arguments without an explicit keyword will result in an error or misinterpretation. . 5.3.4 Conclusions on the Analysis of Room Types . Interestingly, we find Hotel rooms to be promoted through the Airbnb platform as an alternative to the private housings. Even more interestingly, is it, however to no surprise, that the price for a hotel room for outpasses the pricing for private room. Hotel rooms are more than 50% more expensive than, a private room. Moreover, an entire apartment/house is just 300 kr. more per night, at about 1200 kr. . 5.4 Geo Spacial Map . If you are interested in interacting with the airbnb listings, we have here provided you with an interactive map, that visually displays the locations of each listing, color-coded by neighbourhoods. Looking at the density of the listings, you can quickly get an idea of which location is mostly popular, and pricing is displayed by the sice of each point. . #Define mapbox API token and style mapbox_access_token = &#39;pk.eyJ1IjoiYWNodG9uMjExMSIsImEiOiJja2lyam5yemgyNTV0MnJsYmJ0NXdzNWRxIn0.rWJgur27hJnWoBt7Oq5LeQ&#39; px.set_mapbox_access_token(mapbox_access_token) plot_style = &#39;mapbox://styles/achton2111/ckirsv5df0aj01at4zp0d7f3w&#39; #Interactive Geospacial plot fig = px.scatter_mapbox(clean, lat=&quot;latitude&quot;, lon=&quot;longitude&quot;, color=&quot;neighbourhood&quot;, zoom=11, size=&#39;price&#39;, mapbox_style= plot_style, hover_name=&#39;listing_name&#39;, hover_data = {&#39;listing_id&#39;, &#39;property_type&#39;, &#39;room_type&#39;, &#39;accommodates&#39;, &#39;bedrooms&#39;, &#39;beds&#39;, &#39;number_of_reviews&#39;, &#39;last_review&#39;, &#39;price&#39;, &#39;review_scores_rating&#39;}, title = &#39;AirBnB Listing Locations. Coloured by Neighbourhood, Size by Price)&#39; ) fig.show() . . . 5.5 WordClouds . Let&#39;s try to see if there are any visual differences in how the hosts has described their location. These wordclouds visualize words that were most commonly used to describe the neighbourhood. . clean.dropna(inplace=True) #Distinction between neighbourhoods norrebro = clean[clean.neighbourhood == &#39;Nørrebro&#39;] indreby = clean[clean.neighbourhood == &#39;Indre By&#39;] vesterbro_KgsEnghave = clean[clean.neighbourhood == &#39;Vesterbro-Kongens Enghave&#39;] osterbro =clean[clean.neighbourhood == &#39;Østerbro&#39;] frederiksberg = clean[clean.neighbourhood == &#39;Frederiksberg&#39;] amagerOst = clean[clean.neighbourhood == &#39;Amager Øst&#39;] amagerVest = clean[clean.neighbourhood == &#39;Amager Vest&#39;] valby = clean[clean.neighbourhood == &#39;Valby&#39;] bispebjerg = clean[clean.neighbourhood == &#39;Bispebjerg&#39;] vanlose = clean[clean.neighbourhood == &#39;Vanløse&#39;] bronshojHusum = clean[clean.neighbourhood == &#39;Brønshøj-Husum&#39;] . Norrebro . # Iterating through the .csv data file for i in norrebro.listing_description: i = str(i) separate = i.split() #split each word in a row for j in range(len(separate)): separate[j] = separate[j].lower() #convert words to lower case comment_words += &quot; &quot;.join(separate)+&quot; &quot; #Join the words together. Comment_words now contains all words in the data # Creating the Word Cloud final_wordcloud = WordCloud(width = 3000, height = 2000, background_color =&#39;black&#39;, stopwords = STOPWORDS, min_font_size = 10).generate(comment_words) # Displaying the WordCloud plt.figure(facecolor = None) plt.imshow(final_wordcloud) plt.axis(&quot;off&quot;) plt.tight_layout(pad = 0) plt.show() . # Iterating through the .csv data file for i in norrebro.neighbourhood_description: i = str(i) separate = i.split() #split each word in a row for j in range(len(separate)): separate[j] = separate[j].lower() #convert words to lower case comment_words += &quot; &quot;.join(separate)+&quot; &quot; #Join the words together. Comment_words now contains all words in the data # Creating the Word Cloud final_wordcloud = WordCloud(width = 3000, height = 2000, background_color =&#39;black&#39;, stopwords = STOPWORDS, min_font_size = 10).generate(comment_words) # Displaying the WordCloud plt.figure(facecolor = None) plt.imshow(final_wordcloud) plt.axis(&quot;off&quot;) plt.tight_layout(pad = 0) plt.show() . Indre By . # Iterating through the .csv data file for i in indreby.neighbourhood_description: i = str(i) separate = i.split() for j in range(len(separate)): separate[j] = separate[j].lower() comment_words += &quot; &quot;.join(separate)+&quot; &quot; # Creating the Word Cloud final_wordcloud = WordCloud(width = 3000, height = 2000, background_color =&#39;black&#39;, stopwords = STOPWORDS, min_font_size = 10).generate(comment_words) # Displaying the WordCloud plt.figure(facecolor = None) plt.imshow(final_wordcloud) plt.axis(&quot;off&quot;) plt.tight_layout(pad = 0) plt.show() . Vesterbro - Kongens Enghave . # Iterating through the .csv data file for i in vesterbro_KgsEnghave.neighbourhood_description: i = str(i) separate = i.split() for j in range(len(separate)): separate[j] = separate[j].lower() comment_words += &quot; &quot;.join(separate)+&quot; &quot; # Creating the Word Cloud final_wordcloud = WordCloud(width = 3000, height = 2000, background_color =&#39;black&#39;, stopwords = STOPWORDS, min_font_size = 10).generate(comment_words) # Displaying the WordCloud plt.figure(facecolor = None) plt.imshow(final_wordcloud) plt.axis(&quot;off&quot;) plt.tight_layout(pad = 0) plt.show() . &#216;sterbro . # Iterating through the .csv data file for i in osterbro.neighbourhood_description: i = str(i) separate = i.split() for j in range(len(separate)): separate[j] = separate[j].lower() comment_words += &quot; &quot;.join(separate)+&quot; &quot; # Creating the Word Cloud final_wordcloud = WordCloud(width = 3000, height = 2000, background_color =&#39;black&#39;, stopwords = STOPWORDS, min_font_size = 10).generate(comment_words) # Displaying the WordCloud plt.figure(facecolor = None) plt.imshow(final_wordcloud) plt.axis(&quot;off&quot;) plt.tight_layout(pad = 0) plt.show() . Frederiksberg . # Iterating through the .csv data file for i in frederiksberg.neighbourhood_description: i = str(i) separate = i.split() for j in range(len(separate)): separate[j] = separate[j].lower() comment_words += &quot; &quot;.join(separate)+&quot; &quot; # Creating the Word Cloud final_wordcloud = WordCloud(width = 3000, height = 2000, background_color =&#39;black&#39;, stopwords = STOPWORDS, min_font_size = 10).generate(comment_words) # Displaying the WordCloud plt.figure(facecolor = None) plt.imshow(final_wordcloud) plt.axis(&quot;off&quot;) plt.tight_layout(pad = 0) plt.show() . Amager &#216;st . # Iterating through the .csv data file for i in amagerOst.neighbourhood_description: i = str(i) separate = i.split() for j in range(len(separate)): separate[j] = separate[j].lower() comment_words += &quot; &quot;.join(separate)+&quot; &quot; # Creating the Word Cloud final_wordcloud = WordCloud(width = 3000, height = 2000, background_color =&#39;black&#39;, stopwords = STOPWORDS, min_font_size = 10).generate(comment_words) # Displaying the WordCloud plt.figure(facecolor = None) plt.imshow(final_wordcloud) plt.axis(&quot;off&quot;) plt.tight_layout(pad = 0) plt.show() . Amager Vest . # Iterating through the .csv data file for i in amagerVest.neighbourhood_description: i = str(i) separate = i.split() for j in range(len(separate)): separate[j] = separate[j].lower() comment_words += &quot; &quot;.join(separate)+&quot; &quot; # Creating the Word Cloud final_wordcloud = WordCloud(width = 3000, height = 2000, background_color =&#39;black&#39;, stopwords = STOPWORDS, min_font_size = 10).generate(comment_words) # Displaying the WordCloud plt.figure(facecolor = None) plt.imshow(final_wordcloud) plt.axis(&quot;off&quot;) plt.tight_layout(pad = 0) plt.show() . Valby . # Iterating through the .csv data file for i in valby.neighbourhood_description: i = str(i) separate = i.split() for j in range(len(separate)): separate[j] = separate[j].lower() comment_words += &quot; &quot;.join(separate)+&quot; &quot; # Creating the Word Cloud final_wordcloud = WordCloud(width = 3000, height = 2000, background_color =&#39;black&#39;, stopwords = STOPWORDS, min_font_size = 10).generate(comment_words) # Displaying the WordCloud plt.figure(facecolor = None) plt.imshow(final_wordcloud) plt.axis(&quot;off&quot;) plt.tight_layout(pad = 0) plt.show() . Bispebjerg . # Iterating through the .csv data file for i in bispebjerg.neighbourhood_description: i = str(i) separate = i.split() for j in range(len(separate)): separate[j] = separate[j].lower() comment_words += &quot; &quot;.join(separate)+&quot; &quot; # Creating the Word Cloud final_wordcloud = WordCloud(width = 3000, height = 2000, background_color =&#39;black&#39;, stopwords = STOPWORDS, min_font_size = 10).generate(comment_words) # Displaying the WordCloud plt.figure(facecolor = None) plt.imshow(final_wordcloud) plt.axis(&quot;off&quot;) plt.tight_layout(pad = 0) plt.show() . Vanl&#248;se . # Iterating through the .csv data file for i in vanlose.neighbourhood_description: i = str(i) separate = i.split() for j in range(len(separate)): separate[j] = separate[j].lower() comment_words += &quot; &quot;.join(separate)+&quot; &quot; # Creating the Word Cloud final_wordcloud = WordCloud(width = 3000, height = 2000, background_color =&#39;black&#39;, stopwords = STOPWORDS, min_font_size = 10).generate(comment_words) # Displaying the WordCloud plt.figure(facecolor = None) plt.imshow(final_wordcloud) plt.axis(&quot;off&quot;) plt.tight_layout(pad = 0) plt.show() . Br&#248;nsh&#248;j - Husum . # Iterating through the .csv data file for i in bronshojHusum.neighbourhood_description: i = str(i) separate = i.split() for j in range(len(separate)): separate[j] = separate[j].lower() comment_words += &quot; &quot;.join(separate)+&quot; &quot; # Creating the Word Cloud final_wordcloud = WordCloud(width = 3000, height = 2000, background_color =&#39;black&#39;, stopwords = STOPWORDS, min_font_size = 10).generate(comment_words) # Displaying the WordCloud plt.figure(facecolor = None) plt.imshow(final_wordcloud) plt.axis(&quot;off&quot;) plt.tight_layout(pad = 0) plt.show() . 6.0 DISCUSSION AND CONCLUSION . In this project we analyzed different features associated with airbnb listings in special relation to the neighbourhoods. We found that guests that are traveling by group might seek accommodation in the city center, as it offers a unique opportunity to be right in the center of the city, while keeping the cost down. Families, however, might seek to the outer copenhagen areas such as Husum to find a cosy house to stay in. . While wordclouds has been created as a means to understand the words or narratives that describes a location, they fail to give much insight. We suggest further investigating the data through Sentiment analysis or Natural Language Processing techniques, that can further preprocess the textual data, tokenize it and create predictive models that in a more meaningful way will be able to describe these sought after narratives. .",
            "url": "https://achnito.github.io/BDBI/exploratory%20data%20analysis/data%20visualization/wordcloud/airbnb/neighbourhoods%20in%20copenhagen/accommodation%20pricing/2020/12/18/AirBnb.html",
            "relUrl": "/exploratory%20data%20analysis/data%20visualization/wordcloud/airbnb/neighbourhoods%20in%20copenhagen/accommodation%20pricing/2020/12/18/AirBnb.html",
            "date": " • Dec 18, 2020"
        }
        
    
  
    
        ,"post1": {
            "title": "Exploratory Data Analysis of Airbnb Accommodation in Copenhagen",
            "content": ". Note: Code sections can be made visible by using the provided buttons throughout this project . !&#164;%&amp; 1.0 ABSTRACT . Topic . Problem formulation . Research question . Concepts . Dataset and main data analytics methods and tools . Most important results . Conclusions and recommendations . 2.0 INTRODUCTION . Since 2008, Airbnb has grown from a small accommodation platform, hosted in San Francisco, to one that is now recognised throughout the world. Airbnb has revolutionized the tourism housing industry by applying a sharing economy model to the accommodation business. Today, Airbnb has become the world’s largest accommodation service provider with more accommodation options than any other accommodation business - and even more than all of them combined. As a platform, Airbnb enables people (hosts) to offer accommodation services to other people (guests), providing guests with a more unique and personalized way of experiencing the world, and often at a reasonably lower price than other accommodation options. Only just a fraction (20%) of these transactions are captured by Airbnb, which in 2019 returned 4,7 billion USD in sales revenues. . 2.1 PROBLEM FORMULATION AND RESEARCH QUESTION . Data plays a key role in Airbnb’s success. For instance, data enables Airbnb to match guests and hosts and further allows the users to filter the host listings to their likings, in respect of pricing, location, number of beds, and much more. Thereby, data is essential to securing high customer satisfaction. Moreover, Airbnb can use the collected data to extract insights that can be used to improve their service offerings, guide decision making, guide marketing initiatives, and more. . As a platform, Airbnb’s sole value creation lies in creating successful matches between guests and hosts and by ensuring a positive experience for both parties. Naturally, if the platform fails to deliver a positive experience to a user, the user might neglect the platform in total, resulting in negative feedback loops. This leads us to our research question: . How can Airbnb ensure matches and the experiences they create are positive for their customers (users), and providers (hosts)? Moreover, how can Airbnb help guide user decisions to create successful matches and positive experiences? . Currently, Airbnb helps the users to create meaningful matches, by allowing the guests to limit their search for accommodation by different attributes related to the individual host listing. As such, users can easily find accommodation that meets their basic needs for accommodation; e.g. number of beds, bedrooms, price, room type, etc. However, without any knowledge of the different location areas, guests might find difficulty in choosing a location that suits their needs. . In this project, we will examine the accommodation services, listed on Airbnb for Copenhagen, in special regard to the location areas, and the attributes that are associated with them. The goal is to create a report that can guide customers to choose a location that lives up to their expectations, thereby improving the quality of the matches provided by the platform. . 3.0 METHODOLOGY . 3.1 DATASET DESCRIPTION . The data was downloaded from the independent site: Inside Airbnb, which scrapes data from Airbnb, and makes it puplicly available for analysis. This site provides a multitude of datasets containing information on the most populated cities around the world - including Copenhagen. . The datasets provided by Inside Airbnb is as follows: (1) listings, (2) calendar, (3) reviews, (4) listings_summary, (5) reviews_summary. . We have downloaded and inspected all of the datasets, however the calendar dataset is assessed to be unimportant. Thus, the listings and reviews data has been chosen to conduct this project. Furthermore, we chose the most recently scraped data: 28th of Nov. 2020. . 3.1.1 LISTINGS.CSV.GZ . The listings dataset contains data about the airbnb host listings and their respective attributes. In total, there are 74 columns describing 8636 listings on the Airbnb platform. . Here, we provide you with a short glimpse of some of the attributes in the listings dataset: . id: primary key (listings_id) | name: name of the listing | neightbourhood_cleansed: location area | latitude: latitude | longitude: longitude | beds: number of beds in the room | bedrooms: number of bedrooms in the room | price: price of the room per day | room_type: type of room that is made available | property_type: type of the property where the room is in | review_score: average review score of the listing | . 3.1.2 REVIEWS.CSV.GZ . The reviews dataset contains data about reviews that were given for the listed accommodation services. In total, there are 6 columns describing 185.564 reviews. . Here, we provide you with a short glimpse of some of the attributes in the reviews dataset: . listing_id: foreign key references listings | id: primary key (review_id) | date: date review was written | reviewer_name: name of reviewer | comments: review text | . 3.2 Dataset Analysis Process . For this project we perform an exploratory data analysis of the data, as well as visualize the processed data in an interactive map, and furthermore display wordclouds of the review text. . Before we can start the analysis we install the necessary libraries for our python interpreter to work with the data. Specifically, we will be using pandas to create and manage the data in pandas dataframe. We use Plotly&#39;s Express library to visualize the data in an interactive map. Furthermore, we use WordCloud and Matplotlib&#39;s Pyplot to visualize wordsclouds of the review texts. . Once the necessary packages are installed and imported, we can begin to gather the data and initiate the data cleaning process. We use pandas to download the data from Inside Airbnb and to uncompress it, using the in-built decompressor. . We then give a quick glimpse of the datasets that we gathered, before beginning the data cleaning. To clean the data, start by removing columns that are empty, listings that has never been reviewed, renaming columns to be easier interpretable, and finally correcting the data types. . We should now have clean data, that we can use to analyze the attributes of the listings. Here, we will investigate the distributions of prices, neighbourhoods, property types, and room types. Similarly, we will investigate the average prices of listings by neighbourhood, property type, and by room type. In conclusion, we aim to list differnces that occour for each different category. . Nearing the end, the two datasets are merged into one dataframe, that contains data about both listings and reviews. These are joined by the listings_id using the &#39;inner&#39; property. We can then use this dataframe to display the interactive map, and wordclouds that summarized the reviews of each neighbourhood. . Now, let&#39;s get started! . Install Libraries . import pandas as pd import requests import matplotlib.pyplot as plt import plotly.express as px import numpy as np from os import path from PIL import Image from wordcloud import WordCloud, STOPWORDS, ImageColorGenerator . Gathering the Data . #Create DataFrames listings = pd.read_csv(&#39;http://data.insideairbnb.com/denmark/hovedstaden/copenhagen/2020-11-28/data/listings.csv.gz&#39;, compression=&#39;gzip&#39;) reviews = pd.read_csv(&#39;http://data.insideairbnb.com/denmark/hovedstaden/copenhagen/2020-11-28/data/reviews.csv.gz&#39;, compression=&#39;gzip&#39;) . Quick Glimpse of the Data . Listings . listings.head() . id listing_url scrape_id last_scraped name description neighborhood_overview picture_url host_id host_url host_name host_since host_location host_about host_response_time host_response_rate host_acceptance_rate host_is_superhost host_thumbnail_url host_picture_url host_neighbourhood host_listings_count host_total_listings_count host_verifications host_has_profile_pic host_identity_verified neighbourhood neighbourhood_cleansed neighbourhood_group_cleansed latitude longitude property_type room_type accommodates bathrooms bathrooms_text bedrooms beds amenities price minimum_nights maximum_nights minimum_minimum_nights maximum_minimum_nights minimum_maximum_nights maximum_maximum_nights minimum_nights_avg_ntm maximum_nights_avg_ntm calendar_updated has_availability availability_30 availability_60 availability_90 availability_365 calendar_last_scraped number_of_reviews number_of_reviews_ltm number_of_reviews_l30d first_review last_review review_scores_rating review_scores_accuracy review_scores_cleanliness review_scores_checkin review_scores_communication review_scores_location review_scores_value license instant_bookable calculated_host_listings_count calculated_host_listings_count_entire_homes calculated_host_listings_count_private_rooms calculated_host_listings_count_shared_rooms reviews_per_month . 0 6983 | https://www.airbnb.com/rooms/6983 | 20201128003729 | 2020-11-28 | Copenhagen &#39;N Livin&#39; | Lovely apartment located in the hip Nørrebro a... | Nice bars and cozy cafes just minutes away, ye... | https://a0.muscache.com/pictures/42044170/f63c... | 16774 | https://www.airbnb.com/users/show/16774 | Simon | 2009-05-12 | Copenhagen, Capital Region of Denmark, Denmark | I&#39;m currently working as an environmental cons... | NaN | NaN | 0% | f | https://a0.muscache.com/im/users/16774/profile... | https://a0.muscache.com/im/users/16774/profile... | Nørrebro | 1.0 | 1.0 | [&#39;email&#39;, &#39;phone&#39;, &#39;reviews&#39;] | t | f | Copenhagen, Hovedstaden, Denmark | Nrrebro | NaN | 55.68798 | 12.54571 | Private room in apartment | Private room | 2 | NaN | 1 shared bath | 1.0 | 1.0 | [&quot;Hot water&quot;, &quot;Refrigerator&quot;, &quot;Heating&quot;, &quot;Stov... | $361.00 | 2 | 15 | 2 | 2 | 15 | 15 | 2.0 | 15.0 | NaN | t | 29 | 59 | 89 | 89 | 2020-11-28 | 168 | 0 | 0 | 2009-09-04 | 2019-07-19 | 96.0 | 10.0 | 9.0 | 10.0 | 10.0 | 9.0 | 9.0 | NaN | f | 1 | 0 | 1 | 0 | 1.23 | . 1 26057 | https://www.airbnb.com/rooms/26057 | 20201128003729 | 2020-11-29 | Lovely house - most attractive area | Our lovely house in the center of the city is ... | The neighborhood is the most famous one and th... | https://a0.muscache.com/pictures/bfbca07e-4cc1... | 109777 | https://www.airbnb.com/users/show/109777 | Kari | 2010-04-17 | Copenhagen, Capital Region of Denmark, Denmark | We are a family with 2 children, and living in... | within a few hours | 100% | 0% | f | https://a0.muscache.com/im/users/109777/profil... | https://a0.muscache.com/im/users/109777/profil... | Indre By | 1.0 | 1.0 | [&#39;email&#39;, &#39;phone&#39;, &#39;reviews&#39;, &#39;jumio&#39;, &#39;offlin... | t | t | Copenhagen, Hovedstaden, Denmark | Indre By | NaN | 55.69163 | 12.57459 | Entire house | Entire home/apt | 6 | NaN | 1.5 baths | 4.0 | 4.0 | [&quot;Kitchen&quot;, &quot;Essentials&quot;, &quot;Cooking basics&quot;, &quot;I... | $2,400.00 | 3 | 30 | 3 | 3 | 30 | 30 | 3.0 | 30.0 | NaN | t | 11 | 30 | 60 | 335 | 2020-11-29 | 50 | 1 | 0 | 2013-12-02 | 2019-12-14 | 98.0 | 10.0 | 10.0 | 10.0 | 10.0 | 10.0 | 10.0 | NaN | f | 1 | 1 | 0 | 0 | 0.59 | . 2 29118 | https://www.airbnb.com/rooms/29118 | 20201128003729 | 2020-11-28 | Best Location in Cool Istedgade | &lt;b&gt;The space&lt;/b&gt;&lt;br /&gt;The apartment is situate... | NaN | https://a0.muscache.com/pictures/236213/33956c... | 125230 | https://www.airbnb.com/users/show/125230 | Nana | 2010-05-15 | Copenhagen, Capital Region of Denmark, Denmark | I have a Master of Arts in Musicology and I wo... | NaN | NaN | 25% | f | https://a0.muscache.com/im/users/125230/profil... | https://a0.muscache.com/im/users/125230/profil... | Vesterbro | 1.0 | 1.0 | [&#39;email&#39;, &#39;phone&#39;, &#39;reviews&#39;, &#39;offline_governm... | t | t | NaN | Vesterbro-Kongens Enghave | NaN | 55.67069 | 12.55430 | Entire apartment | Entire home/apt | 2 | NaN | 1 bath | 1.0 | 1.0 | [&quot;Hot water&quot;, &quot;Changing table&quot;, &quot;Refrigerator&quot;... | $725.00 | 7 | 14 | 3 | 5 | 14 | 14 | 4.1 | 14.0 | NaN | t | 0 | 23 | 53 | 143 | 2020-11-28 | 22 | 0 | 0 | 2010-06-17 | 2019-08-02 | 98.0 | 10.0 | 10.0 | 10.0 | 10.0 | 10.0 | 10.0 | NaN | f | 1 | 1 | 0 | 0 | 0.17 | . 3 31094 | https://www.airbnb.com/rooms/31094 | 20201128003729 | 2020-11-28 | Very central and cozy, new kitchen | &lt;b&gt;The space&lt;/b&gt;&lt;br /&gt;Welcome to our home, we ... | What else is nearby?&lt;br /&gt;To be honest, I thin... | https://a0.muscache.com/pictures/19408864/7c4c... | 129976 | https://www.airbnb.com/users/show/129976 | Ebbe | 2010-05-22 | Copenhagen, Capital Region of Denmark, Denmark | Hi and welcome. My name is Ebbe, I am a medica... | NaN | NaN | NaN | f | https://a0.muscache.com/im/users/129976/profil... | https://a0.muscache.com/im/users/129976/profil... | Vesterbro | 1.0 | 1.0 | [&#39;email&#39;, &#39;phone&#39;, &#39;facebook&#39;, &#39;reviews&#39;, &#39;jum... | t | t | Copenhagen, Capital Region of Denmark, Denmark | Vesterbro-Kongens Enghave | NaN | 55.66744 | 12.55516 | Entire apartment | Entire home/apt | 3 | NaN | 1 bath | 1.0 | 3.0 | [&quot;TV&quot;, &quot;Heating&quot;, &quot;Kitchen&quot;, &quot;Wifi&quot;, &quot;Cable TV&quot;] | $750.00 | 2 | 10 | 2 | 2 | 10 | 10 | 2.0 | 10.0 | NaN | t | 0 | 0 | 0 | 211 | 2020-11-28 | 17 | 0 | 0 | 2010-08-16 | 2017-08-25 | 97.0 | 10.0 | 10.0 | 10.0 | 10.0 | 10.0 | 9.0 | NaN | f | 1 | 1 | 0 | 0 | 0.14 | . 4 32841 | https://www.airbnb.com/rooms/32841 | 20201128003729 | 2020-11-28 | Cozy flat for Adults/Quiet for kids | Our flat is placed in a Central AND Quiet neig... | NaN | https://a0.muscache.com/pictures/28047599/8efd... | 142143 | https://www.airbnb.com/users/show/142143 | Anders &amp; Maria | 2010-06-10 | Copenhagen, Capital Region of Denmark, Denmark | Anders: r nHitchhiked 100.000 km&#39;s, Been publi... | within a few hours | 100% | 0% | f | https://a0.muscache.com/im/pictures/user/88f79... | https://a0.muscache.com/im/pictures/user/88f79... | Østerbro | 1.0 | 1.0 | [&#39;email&#39;, &#39;phone&#39;, &#39;facebook&#39;, &#39;reviews&#39;, &#39;jum... | t | t | NaN | sterbro | NaN | 55.71158 | 12.56879 | Entire apartment | Entire home/apt | 4 | NaN | 1 bath | 2.0 | 2.0 | [&quot;TV&quot;, &quot;Free parking on premises&quot;, &quot;Iron&quot;, &quot;He... | $618.00 | 100 | 1125 | 100 | 100 | 1125 | 1125 | 100.0 | 1125.0 | NaN | t | 0 | 2 | 32 | 307 | 2020-11-28 | 7 | 0 | 0 | 2010-07-25 | 2016-09-15 | 91.0 | 10.0 | 9.0 | 10.0 | 10.0 | 9.0 | 9.0 | NaN | f | 1 | 1 | 0 | 0 | 0.06 | . listings.info() . &lt;class &#39;pandas.core.frame.DataFrame&#39;&gt; RangeIndex: 8636 entries, 0 to 8635 Data columns (total 74 columns): # Column Non-Null Count Dtype -- -- 0 id 8636 non-null int64 1 listing_url 8636 non-null object 2 scrape_id 8636 non-null int64 3 last_scraped 8636 non-null object 4 name 8635 non-null object 5 description 8396 non-null object 6 neighborhood_overview 4936 non-null object 7 picture_url 8636 non-null object 8 host_id 8636 non-null int64 9 host_url 8636 non-null object 10 host_name 8634 non-null object 11 host_since 8634 non-null object 12 host_location 8614 non-null object 13 host_about 5045 non-null object 14 host_response_time 5180 non-null object 15 host_response_rate 5180 non-null object 16 host_acceptance_rate 6708 non-null object 17 host_is_superhost 8634 non-null object 18 host_thumbnail_url 8634 non-null object 19 host_picture_url 8634 non-null object 20 host_neighbourhood 5662 non-null object 21 host_listings_count 8634 non-null float64 22 host_total_listings_count 8634 non-null float64 23 host_verifications 8636 non-null object 24 host_has_profile_pic 8634 non-null object 25 host_identity_verified 8634 non-null object 26 neighbourhood 4936 non-null object 27 neighbourhood_cleansed 8636 non-null object 28 neighbourhood_group_cleansed 0 non-null float64 29 latitude 8636 non-null float64 30 longitude 8636 non-null float64 31 property_type 8636 non-null object 32 room_type 8636 non-null object 33 accommodates 8636 non-null int64 34 bathrooms 0 non-null float64 35 bathrooms_text 8623 non-null object 36 bedrooms 8440 non-null float64 37 beds 8584 non-null float64 38 amenities 8636 non-null object 39 price 8636 non-null object 40 minimum_nights 8636 non-null int64 41 maximum_nights 8636 non-null int64 42 minimum_minimum_nights 8636 non-null int64 43 maximum_minimum_nights 8636 non-null int64 44 minimum_maximum_nights 8636 non-null int64 45 maximum_maximum_nights 8636 non-null int64 46 minimum_nights_avg_ntm 8636 non-null float64 47 maximum_nights_avg_ntm 8636 non-null float64 48 calendar_updated 0 non-null float64 49 has_availability 8636 non-null object 50 availability_30 8636 non-null int64 51 availability_60 8636 non-null int64 52 availability_90 8636 non-null int64 53 availability_365 8636 non-null int64 54 calendar_last_scraped 8636 non-null object 55 number_of_reviews 8636 non-null int64 56 number_of_reviews_ltm 8636 non-null int64 57 number_of_reviews_l30d 8636 non-null int64 58 first_review 7337 non-null object 59 last_review 7337 non-null object 60 review_scores_rating 7230 non-null float64 61 review_scores_accuracy 7228 non-null float64 62 review_scores_cleanliness 7228 non-null float64 63 review_scores_checkin 7229 non-null float64 64 review_scores_communication 7229 non-null float64 65 review_scores_location 7228 non-null float64 66 review_scores_value 7228 non-null float64 67 license 0 non-null float64 68 instant_bookable 8636 non-null object 69 calculated_host_listings_count 8636 non-null int64 70 calculated_host_listings_count_entire_homes 8636 non-null int64 71 calculated_host_listings_count_private_rooms 8636 non-null int64 72 calculated_host_listings_count_shared_rooms 8636 non-null int64 73 reviews_per_month 7337 non-null float64 dtypes: float64(20), int64(21), object(33) memory usage: 4.9+ MB . listings.shape . (8636, 74) . Reviews . reviews.head(20) . listing_id id date reviewer_id reviewer_name comments . 0 6983 | 8985 | 2009-09-04 | 31133 | Jeff | Convenient location, clean apartment, great br... | . 1 6983 | 9199 | 2009-09-07 | 11472 | Andrea | We really enjoyed staying to Simon in our firs... | . 2 6983 | 11763 | 2009-09-28 | 35317 | Jeanine | Friendly host, save neighbourhood, clean appar... | . 3 6983 | 20616 | 2009-12-17 | 53151 | Sonja | Simon is great! Fantastic place to stay, supe... | . 4 6983 | 23168 | 2010-01-04 | 50856 | James | Great bed, clean apartment, comfy bed, accomod... | . 5 6983 | 33706 | 2010-04-05 | 96881 | Tom | Great value, very clean and comfortable apartm... | . 6 6983 | 40860 | 2010-05-08 | 113545 | Orion | Amazingly helpful and friendly, close to town,... | . 7 6983 | 51622 | 2010-06-10 | 135677 | Gonzalo | Thoroughly recommended, Simon is a great host ... | . 8 6983 | 54476 | 2010-06-18 | 138676 | Tiffany | Fantastic host! Simon was friendly, outgoing a... | . 9 6983 | 56504 | 2010-06-23 | 141069 | Payton | Great location in an interesting neighborhood ... | . 10 6983 | 1073551 | 2012-04-02 | 366694 | Ruifeng | Simon is an extremely nice host. The apartment... | . 11 6983 | 1133218 | 2012-04-15 | 977908 | Johnier Alberto | Very clean, comfortable, and convenient Plus, ... | . 12 6983 | 1159109 | 2012-04-21 | 1960762 | Luca | Nice flat in Central Area | . 13 6983 | 1179503 | 2012-04-25 | 2062676 | Bojana | It was really nice staying in Simon&#39;s flat, I ... | . 14 6983 | 1334891 | 2012-05-23 | 1747677 | Jeanne | Simon was a great host - the flat was in a gre... | . 15 6983 | 1355404 | 2012-05-27 | 1852940 | Stephan | Very nice apartment, kitchen fully equipped an... | . 16 6983 | 1615224 | 2012-07-02 | 2673311 | Sarah | Simon was a great host. Even though he was awa... | . 17 6983 | 2867447 | 2012-11-12 | 3617497 | Nadja | my boyfriend and I spent one weekend at simons... | . 18 6983 | 2897562 | 2012-11-16 | 4042783 | Edith | Simon was a very sweet and laid back host, the... | . 19 6983 | 2909008 | 2012-11-18 | 4042783 | Edith | Simon was a very sweet and laid back host, the... | . reviews.info() . &lt;class &#39;pandas.core.frame.DataFrame&#39;&gt; RangeIndex: 185564 entries, 0 to 185563 Data columns (total 6 columns): # Column Non-Null Count Dtype -- -- 0 listing_id 185564 non-null int64 1 id 185564 non-null int64 2 date 185564 non-null object 3 reviewer_id 185564 non-null int64 4 reviewer_name 185564 non-null object 5 comments 185464 non-null object dtypes: int64(3), object(3) memory usage: 8.5+ MB . reviews.shape . (185564, 6) . Preprocessing . Cleaning Listing Data . #Removing empty columns listings.drop(columns=[&#39;neighbourhood_group_cleansed&#39;,&#39;bathrooms&#39;,&#39;calendar_updated&#39;,&#39;license&#39;], inplace=True) #Deselect Listings with no reviews listings = listings[listings.number_of_reviews &gt; 0] #Rename columns listings.rename(columns={&#39;id&#39;:&#39;listing_id&#39;,&#39;name&#39;:&#39;listing_name&#39;,&#39;description&#39;:&#39;listing_description&#39;},inplace=True) #Correct DataTypes listings = listings.astype( { #DateTime: &#39;last_scraped&#39;:&#39;datetime64[ns]&#39;, &#39;host_since&#39;:&#39;datetime64[ns]&#39;, &#39;calendar_last_scraped&#39;:&#39;datetime64[ns]&#39;, &#39;first_review&#39;:&#39;datetime64[ns]&#39;, &#39;last_review&#39;:&#39;datetime64[ns]&#39; } ) #Correct Prices from $ to DKK, then DataType listings.price = listings.price.str.replace(&#39;,&#39;,&#39;&#39;) listings.price = listings.price.str.replace(&#39;$&#39;,&#39;&#39;) listings.price = listings.price.astype(float) . Cleaning Reviews Data . #Rename Columns reviews.rename(columns={&#39;id&#39;:&#39;reivew_id&#39;,&#39;date&#39;:&#39;review_date&#39;,&#39;comments&#39;:&#39;review_text&#39;},inplace=True) #Change DataTypes reviews.review_date = pd.to_datetime(reviews.review_date) . EDA . Distributions . Neighbourhoods . neighbourhoods = listings[&#39;neighbourhood_cleansed&#39;].value_counts().to_frame(name=&#39;listings&#39;).reset_index() neighbourhoods . index listings . 0 Indre By | 1426 | . 1 Vesterbro-Kongens Enghave | 1169 | . 2 Nrrebro | 1119 | . 3 Frederiksberg | 817 | . 4 sterbro | 777 | . 5 Amager Vest | 640 | . 6 Amager st | 546 | . 7 Valby | 267 | . 8 Bispebjerg | 261 | . 9 Vanlse | 181 | . 10 Brnshj-Husum | 134 | . Property Types . listings[[&#39;property_type&#39;]].value_counts().to_frame(name=&#39;listings&#39;).reset_index() . property_type listings . 0 Entire apartment | 4905 | . 1 Private room in apartment | 916 | . 2 Entire condominium | 412 | . 3 Entire house | 338 | . 4 Entire townhouse | 155 | . 5 Entire serviced apartment | 153 | . 6 Private room in house | 89 | . 7 Entire loft | 88 | . 8 Private room in condominium | 54 | . 9 Private room in townhouse | 39 | . 10 Entire villa | 31 | . 11 Private room in villa | 21 | . 12 Room in hostel | 17 | . 13 Houseboat | 12 | . 14 Private room in bed and breakfast | 11 | . 15 Entire guesthouse | 9 | . 16 Entire guest suite | 9 | . 17 Private room in hostel | 8 | . 18 Shared room in apartment | 8 | . 19 Private room in loft | 7 | . 20 Boat | 7 | . 21 Private room in guesthouse | 6 | . 22 Private room in guest suite | 6 | . 23 Room in serviced apartment | 5 | . 24 Tiny house | 4 | . 25 Shared room in hostel | 4 | . 26 Private room in bungalow | 3 | . 27 Room in boutique hotel | 3 | . 28 Entire cabin | 3 | . 29 Entire bungalow | 3 | . 30 Room in hotel | 3 | . 31 Private room in tiny house | 2 | . 32 Private room in boat | 2 | . 33 Hut | 1 | . 34 Island | 1 | . 35 Private room | 1 | . 36 Private room in serviced apartment | 1 | . Room Types . listings[[&#39;room_type&#39;]].value_counts().to_frame(name=&#39;listings&#39;).reset_index() . room_type listings . 0 Entire home/apt | 6131 | . 1 Private room | 1169 | . 2 Hotel room | 25 | . 3 Shared room | 12 | . Property Types by Neighbourhood . #Select properties listed more than 400 times listings_clean = listings[listings.property_type.isin([&#39;Entire apartment&#39;,&#39;Private room in apartment&#39;,&#39;Entire condominium&#39;,&#39;Entire house&#39;])] #Count number of listings in neighbourhoods by property type listings_byNeighbourhood = listings_clean.groupby([&#39;neighbourhood_cleansed&#39;,&#39;property_type&#39;]).neighbourhood_cleansed.count().to_frame(name = &#39;listings&#39;).reset_index() #Sum number of listings per neighbourhood listingsNeighbourhoodCount = listings_byNeighbourhood.groupby(&#39;neighbourhood_cleansed&#39;)[&#39;listings&#39;].sum().to_frame(name = &#39;total_listings&#39;).sort_values(by=&#39;total_listings&#39;, ascending=False).reset_index() #Calculate ratio of property types in the different neighbourhoods neighbourhoodPropertyRatio = listings_byNeighbourhood.merge(listingsNeighbourhoodCount, on=&#39;neighbourhood_cleansed&#39;) neighbourhoodPropertyRatio[&#39;ratio_of_property_type_in_neighbourhood&#39;] = neighbourhoodPropertyRatio[&#39;listings&#39;]/neighbourhoodPropertyRatio[&#39;total_listings&#39;]*100 neighbourhoodPropertyRatio.head(10) . neighbourhood_cleansed property_type listings total_listings ratio_of_property_type_in_neighbourhood . 0 Amager Vest | Entire apartment | 373 | 551 | 67.695100 | . 1 Amager Vest | Entire condominium | 37 | 551 | 6.715064 | . 2 Amager Vest | Entire house | 62 | 551 | 11.252269 | . 3 Amager Vest | Private room in apartment | 79 | 551 | 14.337568 | . 4 Amager st | Entire apartment | 301 | 466 | 64.592275 | . 5 Amager st | Entire condominium | 36 | 466 | 7.725322 | . 6 Amager st | Entire house | 59 | 466 | 12.660944 | . 7 Amager st | Private room in apartment | 70 | 466 | 15.021459 | . 8 Bispebjerg | Entire apartment | 168 | 246 | 68.292683 | . 9 Bispebjerg | Entire condominium | 18 | 246 | 7.317073 | . Room Types by Neighbourhood . #Count number of listings in neighbourhoods by property type roomCount = listings.groupby([&#39;neighbourhood_cleansed&#39;,&#39;room_type&#39;]).neighbourhood_cleansed.count().to_frame(name = &#39;listings&#39;).reset_index() #Sum number of listings per neighbourhood roomNeighbourhoodCount = roomCount.groupby(&#39;neighbourhood_cleansed&#39;)[&#39;listings&#39;].sum().to_frame(name = &#39;total_listings&#39;).sort_values(by=&#39;total_listings&#39;, ascending=False).reset_index() #Calculate ratio of property types in the different neighbourhoods roomRatio = roomCount.merge(listingsNeighbourhoodCount, on=&#39;neighbourhood_cleansed&#39;) roomRatio[&#39;ratio_of_room_type_in_neighbourhood&#39;] = roomRatio[&#39;listings&#39;]/roomRatio[&#39;total_listings&#39;]*100 roomRatio.head(10) . neighbourhood_cleansed room_type listings total_listings ratio_of_room_type_in_neighbourhood . 0 Amager Vest | Entire home/apt | 529 | 551 | 96.007260 | . 1 Amager Vest | Hotel room | 1 | 551 | 0.181488 | . 2 Amager Vest | Private room | 108 | 551 | 19.600726 | . 3 Amager Vest | Shared room | 2 | 551 | 0.362976 | . 4 Amager st | Entire home/apt | 434 | 466 | 93.133047 | . 5 Amager st | Hotel room | 3 | 466 | 0.643777 | . 6 Amager st | Private room | 108 | 466 | 23.175966 | . 7 Amager st | Shared room | 1 | 466 | 0.214592 | . 8 Bispebjerg | Entire home/apt | 206 | 246 | 83.739837 | . 9 Bispebjerg | Private room | 55 | 246 | 22.357724 | . Accomodations by Neighbourhood . df = pd.DataFrame() df[&#39;avg_n_accommodations&#39;] =listings.groupby(&#39;neighbourhood_cleansed&#39;).accommodates.mean() df = df.reset_index() df . neighbourhood_cleansed avg_n_accommodations . 0 Amager Vest | 3.668750 | . 1 Amager st | 3.483516 | . 2 Bispebjerg | 3.249042 | . 3 Brnshj-Husum | 4.589552 | . 4 Frederiksberg | 3.470012 | . 5 Indre By | 3.816971 | . 6 Nrrebro | 3.102770 | . 7 Valby | 3.550562 | . 8 Vanlse | 3.872928 | . 9 Vesterbro-Kongens Enghave | 3.230967 | . 10 sterbro | 3.464607 | . Pricing by Neighbourhood . neighbourhoodPricing = listings.groupby(&#39;neighbourhood_cleansed&#39;).price.mean().to_frame().sort_values(by=&#39;price&#39;, ascending=False).reset_index() neighbourhoodPricing . neighbourhood_cleansed price . 0 Indre By | 1532.850631 | . 1 sterbro | 1039.018018 | . 2 Amager st | 1020.058608 | . 3 Vesterbro-Kongens Enghave | 1017.957228 | . 4 Frederiksberg | 1002.586291 | . 5 Amager Vest | 956.114063 | . 6 Nrrebro | 874.478999 | . 7 Brnshj-Husum | 809.671642 | . 8 Valby | 753.269663 | . 9 Vanlse | 752.756906 | . 10 Bispebjerg | 674.777778 | . #Calculate Average Price Per Person df[&#39;price&#39;] = neighbourhoodPricing.price df[&#39;price_perPerson&#39;] = df.price/df.avg_n_accommodations df . neighbourhood_cleansed avg_n_accommodations price price_ratio price_perPerson . 0 Amager Vest | 3.668750 | 1532.850631 | 417.812779 | 417.812779 | . 1 Amager st | 3.483516 | 1039.018018 | 298.267002 | 298.267002 | . 2 Bispebjerg | 3.249042 | 1020.058608 | 313.956718 | 313.956718 | . 3 Brnshj-Husum | 4.589552 | 1017.957228 | 221.798811 | 221.798811 | . 4 Frederiksberg | 3.470012 | 1002.586291 | 288.928748 | 288.928748 | . 5 Indre By | 3.816971 | 956.114063 | 250.490291 | 250.490291 | . 6 Nrrebro | 3.102770 | 874.478999 | 281.838134 | 281.838134 | . 7 Valby | 3.550562 | 809.671642 | 228.040431 | 228.040431 | . 8 Vanlse | 3.872928 | 753.269663 | 194.496161 | 194.496161 | . 9 Vesterbro-Kongens Enghave | 3.230967 | 752.756906 | 232.981949 | 232.981949 | . 10 sterbro | 3.464607 | 674.777778 | 194.763125 | 194.763125 | . Pricing by Property Type . PropertyPricing = listings.groupby(&#39;property_type&#39;).price.mean().to_frame().sort_values(by=&#39;price&#39;, ascending=False).reset_index() PropertyPricing.head(20) . property_type price . 0 Boat | 1839.714286 | . 1 Entire villa | 1800.774194 | . 2 Houseboat | 1636.083333 | . 3 Island | 1600.000000 | . 4 Private room | 1500.000000 | . 5 Entire loft | 1488.738636 | . 6 Entire townhouse | 1476.600000 | . 7 Entire serviced apartment | 1459.496732 | . 8 Entire house | 1371.062130 | . 9 Room in serviced apartment | 1235.400000 | . 10 Entire condominium | 1161.533981 | . 11 Private room in tiny house | 1123.500000 | . 12 Entire apartment | 1104.796330 | . 13 Entire cabin | 1022.000000 | . 14 Entire bungalow | 1009.666667 | . 15 Room in hotel | 921.333333 | . 16 Room in hostel | 894.529412 | . 17 Room in boutique hotel | 872.666667 | . 18 Hut | 850.000000 | . 19 Entire guest suite | 786.222222 | . Pricing by Room Type . roomPricing = listings.groupby(&#39;room_type&#39;).price.mean().to_frame().sort_values(by=&#39;price&#39;, ascending=False).reset_index() roomPricing.head(20) . room_type price . 0 Entire home/apt | 1151.074539 | . 1 Hotel room | 960.080000 | . 2 Shared room | 618.583333 | . 3 Private room | 584.256630 | . Visualizations . Maps . #Merge reviews and listings group_listingReviews = reviews.merge(listings, on=&#39;listing_id&#39;, how=&#39;inner&#39;) #Define mapbox API token and style mapbox_access_token = &#39;pk.eyJ1IjoiYWNodG9uMjExMSIsImEiOiJja2lyam5yemgyNTV0MnJsYmJ0NXdzNWRxIn0.rWJgur27hJnWoBt7Oq5LeQ&#39; px.set_mapbox_access_token(mapbox_access_token) plot_style = &#39;mapbox://styles/achton2111/ckirsv5df0aj01at4zp0d7f3w&#39; #Interactive Geospacial plot fig = px.scatter_mapbox(group_listingReviews, lat=&quot;latitude&quot;, lon=&quot;longitude&quot;, color=&quot;neighbourhood_cleansed&quot;, zoom=10, size=&#39;price&#39;, mapbox_style= plot_style, hover_name=&#39;listing_name&#39;, hover_data = {&#39;price&#39;, &#39;property_type&#39;, &#39;room_type&#39;, &#39;accommodates&#39;, &#39;beds&#39;, &#39;review_scores_rating&#39;}, opacity = 0.8, title = &#39;AirBnB Listing Locations. Coloured by Neighbourhood, Size by Price)&#39; ) fig.show() . . . WordClouds . Let&#39;s try to see if there are any visual differences between reviews in the different neighbourhoods . #Distinction between neighbourhoods norrebro = group_listingReviews[group_listingReviews.neighbourhood_cleansed == &#39;Nrrebro&#39;] indreby = group_listingReviews[group_listingReviews.neighbourhood_cleansed == &#39;Indre By&#39;] vesterbro_KgsEnghave = group_listingReviews[group_listingReviews.neighbourhood_cleansed == &#39;Vesterbro-Kongens Enghave&#39;] osterbro = group_listingReviews[group_listingReviews.neighbourhood_cleansed == &#39;sterbro&#39;] frederiksberg = group_listingReviews[group_listingReviews.neighbourhood_cleansed == &#39;Frederiksberg&#39;] amagerOst = group_listingReviews[group_listingReviews.neighbourhood_cleansed == &#39;Amager st&#39;] amagerVest = group_listingReviews[group_listingReviews.neighbourhood_cleansed == &#39;Amager Vest&#39;] valby = group_listingReviews[group_listingReviews.neighbourhood_cleansed == &#39;Valby&#39;] bispebjerg = group_listingReviews[group_listingReviews.neighbourhood_cleansed == &#39;Bispebjerg&#39;] vanlose = group_listingReviews[group_listingReviews.neighbourhood_cleansed == &#39;Vanlse&#39;] bronshojHusum = group_listingReviews[group_listingReviews.neighbourhood_cleansed == &#39;Brnshj-Husum&#39;] . Norrebro . # Iterating through the .csv data file for i in norrebro.review_text: i = str(i) separate = i.split() for j in range(len(separate)): separate[j] = separate[j].lower() comment_words += &quot; &quot;.join(separate)+&quot; &quot; # Creating the Word Cloud final_wordcloud = WordCloud(width = 3000, height = 2000, background_color =&#39;black&#39;, stopwords = STOPWORDS, min_font_size = 10).generate(comment_words) # Displaying the WordCloud plt.figure(facecolor = None) plt.imshow(final_wordcloud) plt.axis(&quot;off&quot;) plt.tight_layout(pad = 0) plt.show() . Indre By . # Iterating through the .csv data file for i in indreby.review_text: i = str(i) separate = i.split() for j in range(len(separate)): separate[j] = separate[j].lower() comment_words += &quot; &quot;.join(separate)+&quot; &quot; # Creating the Word Cloud final_wordcloud = WordCloud(width = 3000, height = 2000, background_color =&#39;black&#39;, stopwords = STOPWORDS, min_font_size = 10).generate(comment_words) # Displaying the WordCloud plt.figure(facecolor = None) plt.imshow(final_wordcloud) plt.axis(&quot;off&quot;) plt.tight_layout(pad = 0) plt.show() . Vesterbro - Kongens Enghave . # Iterating through the .csv data file for i in vesterbro_KgsEnghave.review_text: i = str(i) separate = i.split() for j in range(len(separate)): separate[j] = separate[j].lower() comment_words += &quot; &quot;.join(separate)+&quot; &quot; # Creating the Word Cloud final_wordcloud = WordCloud(width = 3000, height = 2000, background_color =&#39;black&#39;, stopwords = STOPWORDS, min_font_size = 10).generate(comment_words) # Displaying the WordCloud plt.figure(facecolor = None) plt.imshow(final_wordcloud) plt.axis(&quot;off&quot;) plt.tight_layout(pad = 0) plt.show() . &#216;sterbro . # Iterating through the .csv data file for i in osterbro.review_text: i = str(i) separate = i.split() for j in range(len(separate)): separate[j] = separate[j].lower() comment_words += &quot; &quot;.join(separate)+&quot; &quot; # Creating the Word Cloud final_wordcloud = WordCloud(width = 3000, height = 2000, background_color =&#39;black&#39;, stopwords = STOPWORDS, min_font_size = 10).generate(comment_words) # Displaying the WordCloud plt.figure(facecolor = None) plt.imshow(final_wordcloud) plt.axis(&quot;off&quot;) plt.tight_layout(pad = 0) plt.show() . Frederiksberg . # Iterating through the .csv data file for i in frederiksberg.review_text: i = str(i) separate = i.split() for j in range(len(separate)): separate[j] = separate[j].lower() comment_words += &quot; &quot;.join(separate)+&quot; &quot; # Creating the Word Cloud final_wordcloud = WordCloud(width = 3000, height = 2000, background_color =&#39;black&#39;, stopwords = STOPWORDS, min_font_size = 10).generate(comment_words) # Displaying the WordCloud plt.figure(facecolor = None) plt.imshow(final_wordcloud) plt.axis(&quot;off&quot;) plt.tight_layout(pad = 0) plt.show() . Amager &#216;st . # Iterating through the .csv data file for i in amagerOst.review_text: i = str(i) separate = i.split() for j in range(len(separate)): separate[j] = separate[j].lower() comment_words += &quot; &quot;.join(separate)+&quot; &quot; # Creating the Word Cloud final_wordcloud = WordCloud(width = 3000, height = 2000, background_color =&#39;black&#39;, stopwords = STOPWORDS, min_font_size = 10).generate(comment_words) # Displaying the WordCloud plt.figure(facecolor = None) plt.imshow(final_wordcloud) plt.axis(&quot;off&quot;) plt.tight_layout(pad = 0) plt.show() . Amager Vest . # Iterating through the .csv data file for i in amagerVest.review_text: i = str(i) separate = i.split() for j in range(len(separate)): separate[j] = separate[j].lower() comment_words += &quot; &quot;.join(separate)+&quot; &quot; # Creating the Word Cloud final_wordcloud = WordCloud(width = 3000, height = 2000, background_color =&#39;black&#39;, stopwords = STOPWORDS, min_font_size = 10).generate(comment_words) # Displaying the WordCloud plt.figure(facecolor = None) plt.imshow(final_wordcloud) plt.axis(&quot;off&quot;) plt.tight_layout(pad = 0) plt.show() . Valby . # Iterating through the .csv data file for i in valby.review_text: i = str(i) separate = i.split() for j in range(len(separate)): separate[j] = separate[j].lower() comment_words += &quot; &quot;.join(separate)+&quot; &quot; # Creating the Word Cloud final_wordcloud = WordCloud(width = 3000, height = 2000, background_color =&#39;black&#39;, stopwords = STOPWORDS, min_font_size = 10).generate(comment_words) # Displaying the WordCloud plt.figure(facecolor = None) plt.imshow(final_wordcloud) plt.axis(&quot;off&quot;) plt.tight_layout(pad = 0) plt.show() . Bispebjerg . # Iterating through the .csv data file for i in bispebjerg.review_text: i = str(i) separate = i.split() for j in range(len(separate)): separate[j] = separate[j].lower() comment_words += &quot; &quot;.join(separate)+&quot; &quot; # Creating the Word Cloud final_wordcloud = WordCloud(width = 3000, height = 2000, background_color =&#39;black&#39;, stopwords = STOPWORDS, min_font_size = 10).generate(comment_words) # Displaying the WordCloud plt.figure(facecolor = None) plt.imshow(final_wordcloud) plt.axis(&quot;off&quot;) plt.tight_layout(pad = 0) plt.show() . Vanl&#248;se . # Iterating through the .csv data file for i in vanlose.review_text: i = str(i) separate = i.split() for j in range(len(separate)): separate[j] = separate[j].lower() comment_words += &quot; &quot;.join(separate)+&quot; &quot; # Creating the Word Cloud final_wordcloud = WordCloud(width = 3000, height = 2000, background_color =&#39;black&#39;, stopwords = STOPWORDS, min_font_size = 10).generate(comment_words) # Displaying the WordCloud plt.figure(facecolor = None) plt.imshow(final_wordcloud) plt.axis(&quot;off&quot;) plt.tight_layout(pad = 0) plt.show() . Br&#248;nsh&#248;j - Husum . # Iterating through the .csv data file for i in bronshojHusum.review_text: i = str(i) separate = i.split() for j in range(len(separate)): separate[j] = separate[j].lower() comment_words += &quot; &quot;.join(separate)+&quot; &quot; # Creating the Word Cloud final_wordcloud = WordCloud(width = 3000, height = 2000, background_color =&#39;black&#39;, stopwords = STOPWORDS, min_font_size = 10).generate(comment_words) # Displaying the WordCloud plt.figure(facecolor = None) plt.imshow(final_wordcloud) plt.axis(&quot;off&quot;) plt.tight_layout(pad = 0) plt.show() . 4.0 RESULTS . 5.0 DISCUSSION . 6.0 CONCLUSION .",
            "url": "https://achnito.github.io/BDBI/exploratory%20data%20analysis/data%20visualization/wordcloud/airbnb/neighbourhoods%20in%20copenhagen/accommodation%20pricing/2020/12/17/AirBnb.html",
            "relUrl": "/exploratory%20data%20analysis/data%20visualization/wordcloud/airbnb/neighbourhoods%20in%20copenhagen/accommodation%20pricing/2020/12/17/AirBnb.html",
            "date": " • Dec 17, 2020"
        }
        
    
  
    
        ,"post2": {
            "title": "Exploratory Data Analysis of Airbnb Accommodation in Copenhagen",
            "content": ". Note: Code sections can be made visible by using the provided buttons throughout this project . 1.0 ABSTRACT . Topic . Problem formulation . Research question . Concepts . Dataset and main data analytics methods and tools . Most important results . Conclusions and recommendations . 2.0 INTRODUCTION . Since 2008, Airbnb has grown from a small accommodation platform, hosted in San Francisco, to one that is now recognised throughout the world. Airbnb has revolutionized the tourism housing industry by applying a sharing economy model to the accommodation business. Today, Airbnb has become the world’s largest accommodation service provider with more accommodation options than any other accommodation business - and even more than all of them combined. As a platform, Airbnb enables people (hosts) to offer accommodation services to other people (guests), providing guests with a more unique and personalized way of experiencing the world, and often at a reasonably lower price than other accommodation options. Only just a fraction (20%) of these transactions are captured by Airbnb, which in 2019 returned 4,7 billion USD in sales revenues. . 2.1 Problem Formulation and Research Question . Data plays a key role in Airbnb’s success. For instance, data enables Airbnb to match guests and hosts and further allows the users to filter the host listings to their likings, in respect of pricing, location, number of beds, and much more. Thereby, data is essential to securing high customer satisfaction. Moreover, Airbnb can use the collected data to extract insights that can be used to improve their service offerings, guide decision making, guide marketing initiatives, and more. . As a platform, Airbnb’s sole value creation lies in creating successful matches between guests and hosts and by ensuring a positive experience for both parties. Naturally, if the platform fails to deliver a positive experience to a user, the user might neglect the platform in total, resulting in negative feedback loops. This leads us to our research question: . How can Airbnb ensure matches and the experiences they create are positive for their customers (users), and providers (hosts)? Moreover, how can Airbnb help guide user decisions to create successful matches and positive experiences? . Currently, Airbnb helps the users to create meaningful matches, by allowing the guests to limit their search for accommodation by different attributes related to the individual host listing. As such, users can easily find accommodation that meets their basic needs for accommodation; e.g. number of beds, bedrooms, price, room type, etc. However, without any knowledge of the different location areas, guests might find difficulty in choosing a location that suits their needs. . In this project, we will examine the accommodation services, listed on Airbnb for Copenhagen, in special regard to the location areas, and the attributes that are associated with them. The goal is to create a report that can guide customers to choose a location that lives up to their expectations, thereby improving the quality of the matches provided by the platform. . 3.0 METHODOLOGY . 3.1 Dataset Analysis Process . To answer the question of interest, we perform an exploratory data analysis (EDA) to gain an understanding of what features that seperates and defines neighbourhoods and the differences in their accommodation offerings. More specifically, we will zoom in on the neighbourhoods with respect to which type of room and property that are most common in the area, and how the neighbourhood affect the listing price. Moreover, the price for accommodating one person is calculated to provide an indication of wealth. . Moving on, we create an interactive map that displays each individual accommodation offering in a geospatial visualization. Through interaction the map allows the user to easily find listings, view that most expensivest listings and display where each neighbourhood is located. Furthermore, the interactivity enables zooming, moving and filtering of the data to enhance the understanding of the geospace. . Finally, we create wordcloud visualizations to display how hosts are descriping the neighbourhoods, that allows us to get a sense of which words that best describes the location areas. . 3.2 Dataset Description . The data was downloaded from the independent site: Inside Airbnb, which scrapes data from Airbnb, and makes it puplicly available for analysis. This site provides a multitude of datasets containing information on the most populated cities around the world - including Copenhagen. . The datasets provided by Inside Airbnb is as follows: (1) listings, (2) calendar, (3) reviews, (4) listings_summary, (5) reviews_summary. . We have downloaded and inspected all of the datasets. However, only the listings are assessed to be important for this project. . The most recent data set is used, which was scraped on 28th of Nov. 2020. . The listings dataset contains data about the airbnb host listings and their respective attributes. In total, there are 74 columns describing 8636 listings on the Airbnb platform. However, for this project, the following 17 attributes has been selected for analysis: . id: primary key (listings_id) | name: name of listing | description: room description | neighbourhood_overview: text description of the neighbourhood | neightbourhood_cleansed: location area cleaned from special charaters | latitude: latitude | longitude: longitude | property_type: type of the property where the room is in | room_type: type of room that is made available | accommodates: max number of people that can stay at a time | beds: number of beds in the room | bedrooms: number of bedrooms in the room | ammenties: facilities available | price: price of the room per day | number_of_reviews: number of times the listing was reviewed | review_scores_rating: average review score of the listing | . 3.3 Preprocessing Steps . As usual, before we can initialize the data exploration, we will need to preprocess the data. Overall the preprocessing will follow the following structure: . Install and Import libraries | Gather data | Data Cleaning | By utilizing the pandas library, we download and unzip the data using pandas built-in decompression tool, and then using it to create dataframes that stores the data, enabling data cleaning and manipulation. We clean the data by selecting only the 17 columns as listed previously, checking for misclassified datatypes and renaming columns and values to ease interpretation of the data. . Without further ado, let&#39;s get started! . 4.0 PROCESSING THE DATA . In this section, we will process and clean the data before initiating the exploratory data analysis. . This project is created in a colab notebook and exported to fastpages for improved readability and interactive features such as the code button provided bellow. You will find these buttons throughout this paper, however some code snippets has been hidden entirely. . If you wish to review the full line of code, please see the buttons under the headline of this post. . 4.1 Install and Import Libraries . import pandas as pd #used to store and manage the data import numpy as np import matplotlib.pyplot as plt #visualization library import plotly.express as px #visualization library used for geospatial data #Wordcloud related libraries from os import path from PIL import Image from wordcloud import WordCloud, STOPWORDS, ImageColorGenerator . We initiate our data analysis by installing and importing the libraries for our python interpreter. For this project, we use pandas, pyplot, express, WordCloud, STOPWORDS, and ImageColorGenerator. These libraries enables us to clean and process the data and later to create meaningful visualizations. . 4.2 Gathering the Data . #Create DataFrames listings = pd.read_csv(&#39;http://data.insideairbnb.com/denmark/hovedstaden/copenhagen/2020-11-28/data/listings.csv.gz&#39;, compression=&#39;gzip&#39;) listings = listings.iloc[:,[0,4,5,6,27,29,30,31,32,33,36,37,38,39,55,59,60]] . The dataset is downloaded, unzipped and stored in a dataframe using pandas. Again using pandas, the irrelevant columns are dropped, thereby only the columns chosen for this project remains. . Now that, we have gathered the data, let us take a quick glimpse on the data: . listings.head(3) . id name description neighborhood_overview neighbourhood_cleansed latitude longitude property_type room_type accommodates bedrooms beds amenities price number_of_reviews last_review review_scores_rating . 0 6983 | Copenhagen &#39;N Livin&#39; | Lovely apartment located in the hip Nørrebro a... | Nice bars and cozy cafes just minutes away, ye... | Nrrebro | 55.68798 | 12.54571 | Private room in apartment | Private room | 2 | 1.0 | 1.0 | [&quot;Hot water&quot;, &quot;Refrigerator&quot;, &quot;Heating&quot;, &quot;Stov... | $361.00 | 168 | 2019-07-19 | 96.0 | . 1 26057 | Lovely house - most attractive area | Our lovely house in the center of the city is ... | The neighborhood is the most famous one and th... | Indre By | 55.69163 | 12.57459 | Entire house | Entire home/apt | 6 | 4.0 | 4.0 | [&quot;Kitchen&quot;, &quot;Essentials&quot;, &quot;Cooking basics&quot;, &quot;I... | $2,400.00 | 50 | 2019-12-14 | 98.0 | . 2 29118 | Best Location in Cool Istedgade | &lt;b&gt;The space&lt;/b&gt;&lt;br /&gt;The apartment is situate... | NaN | Vesterbro-Kongens Enghave | 55.67069 | 12.55430 | Entire apartment | Entire home/apt | 2 | 1.0 | 1.0 | [&quot;Hot water&quot;, &quot;Changing table&quot;, &quot;Refrigerator&quot;... | $725.00 | 22 | 2019-08-02 | 98.0 | . listings.info() . &lt;class &#39;pandas.core.frame.DataFrame&#39;&gt; Int64Index: 7337 entries, 0 to 8601 Data columns (total 17 columns): # Column Non-Null Count Dtype -- -- 0 listing_id 7337 non-null int64 1 listing_name 7336 non-null object 2 listing_description 7215 non-null object 3 neighborhood_overview 4419 non-null object 4 neighbourhood_cleansed 7337 non-null object 5 latitude 7337 non-null float64 6 longitude 7337 non-null float64 7 property_type 7337 non-null object 8 room_type 7337 non-null object 9 accommodates 7337 non-null int64 10 bedrooms 7202 non-null float64 11 beds 7321 non-null float64 12 amenities 7337 non-null object 13 price 7337 non-null object 14 number_of_reviews 7337 non-null int64 15 last_review 7337 non-null object 16 review_scores_rating 7230 non-null float64 dtypes: float64(5), int64(3), object(9) memory usage: 1.0+ MB . listings.isnull().sum() . id 0 name 1 description 240 neighborhood_overview 3700 neighbourhood_cleansed 0 latitude 0 longitude 0 property_type 0 room_type 0 accommodates 0 bedrooms 196 beds 52 amenities 0 price 0 number_of_reviews 0 last_review 1299 review_scores_rating 1406 dtype: int64 . listings.shape . (8636, 17) . From the quick glimpse, we see that not all hosts are providing a description of the neighbourhood that the listing is located at (the values appear as missing (NaN). In fact, 3700 listings appear without a description of the neighbourhood. . We find that, in the cleansed neighbourhood attribute letter &#39;ø&#39; has been removed from the name. . The Price attribute is listed as USD marked by a &#39;$&#39;, however the listing price should be denoted as DKK. Moreover, the price is interpreted as an object instead of an integer-value. Similarly, &#39;bedrooms&#39; and &#39;beds&#39; are interpreted as float types instead of intergers. Additionally, the last_review attribute should be classified as a datatime type. . 4.3 Data Cleaning . Lets try to correct the above mentioned data anomali. . We start by removing renaming the columns, and then the neighbourhood names to be easier interpretable. To correct the datatypes, some actions has to happen beforehand. For the pricing, the &#39;$&#39; and &#39;,&#39; is removed before correcting the data type. For beds and bedrooms, the missing values are filled with a zero, under the assumption, that these listings are available but does not offer either a bed or a bedroom. . #Rename columns listings.rename(columns={&#39;id&#39;:&#39;listing_id&#39;,&#39;name&#39;:&#39;listing_name&#39;,&#39;description&#39;:&#39;listing_description&#39;, &#39;neighbourhood_overview&#39;:&#39;neighbourhood_description&#39;},inplace=True) #Rename Neighbourhood Values listings[&#39;neighbourhood_cleansed&#39;] = listings.neighbourhood_cleansed.replace( { &#39;Nrrebro&#39;:&#39;Nørrebro&#39;, &#39;sterbro&#39;:&#39;Østerbro&#39;, &#39;Amager st&#39;: &#39;Amager Øst&#39;, &#39;Vanlse&#39;: &#39;Vanløse&#39;, &#39;Brnshj-Husum&#39;:&#39;Brønshøj-Husum&#39; } ) #Fill missing values cols = [&#39;beds&#39;,&#39;bedrooms&#39;] listings[cols] = listings[cols].fillna(&#39;0&#39;) #Correct DataTypes listings = listings.astype( { &#39;bedrooms&#39;:int, &#39;beds&#39;:int, &#39;last_review&#39;:&#39;datetime64[ns]&#39; } ) #Correct Prices from $ to DKK, then DataType listings.price = listings.price.str.replace(&#39;,&#39;,&#39;&#39;) listings.price = listings.price.str.replace(&#39;$&#39;,&#39;&#39;) listings.price = listings.price.astype(float) clean = listings . We should now have clean data, that we can use to analyze the attributes of the listings. Here, we will investigate the distributions of prices, neighbourhoods, property types, and room types. Similarly, we will investigate the average prices of listings by neighbourhood, property type, and by room type. In conclusion, we aim to list differnces that occour for each different category. . Nearing the end, the two datasets are merged into one dataframe, that contains data about both listings and reviews. These are joined by the listings_id using the &#39;inner&#39; property. We can then use this dataframe to display the interactive map, and wordclouds that summarized the reviews of each neighbourhood. . 5.0 EXPLORATORY DATA PROCESSING . Distributions . Neighbourhoods . neighbourhoods = listings[&#39;neighbourhood_cleansed&#39;].value_counts().to_frame(name=&#39;listings&#39;).reset_index() neighbourhoods . index listings . 0 Indre By | 1426 | . 1 Vesterbro-Kongens Enghave | 1169 | . 2 Nrrebro | 1119 | . 3 Frederiksberg | 817 | . 4 sterbro | 777 | . 5 Amager Vest | 640 | . 6 Amager st | 546 | . 7 Valby | 267 | . 8 Bispebjerg | 261 | . 9 Vanlse | 181 | . 10 Brnshj-Husum | 134 | . Property Types . listings[[&#39;property_type&#39;]].value_counts().to_frame(name=&#39;listings&#39;).reset_index() . property_type listings . 0 Entire apartment | 4905 | . 1 Private room in apartment | 916 | . 2 Entire condominium | 412 | . 3 Entire house | 338 | . 4 Entire townhouse | 155 | . 5 Entire serviced apartment | 153 | . 6 Private room in house | 89 | . 7 Entire loft | 88 | . 8 Private room in condominium | 54 | . 9 Private room in townhouse | 39 | . 10 Entire villa | 31 | . 11 Private room in villa | 21 | . 12 Room in hostel | 17 | . 13 Houseboat | 12 | . 14 Private room in bed and breakfast | 11 | . 15 Entire guesthouse | 9 | . 16 Entire guest suite | 9 | . 17 Private room in hostel | 8 | . 18 Shared room in apartment | 8 | . 19 Private room in loft | 7 | . 20 Boat | 7 | . 21 Private room in guesthouse | 6 | . 22 Private room in guest suite | 6 | . 23 Room in serviced apartment | 5 | . 24 Tiny house | 4 | . 25 Shared room in hostel | 4 | . 26 Private room in bungalow | 3 | . 27 Room in boutique hotel | 3 | . 28 Entire cabin | 3 | . 29 Entire bungalow | 3 | . 30 Room in hotel | 3 | . 31 Private room in tiny house | 2 | . 32 Private room in boat | 2 | . 33 Hut | 1 | . 34 Island | 1 | . 35 Private room | 1 | . 36 Private room in serviced apartment | 1 | . Room Types . listings[[&#39;room_type&#39;]].value_counts().to_frame(name=&#39;listings&#39;).reset_index() . room_type listings . 0 Entire home/apt | 6131 | . 1 Private room | 1169 | . 2 Hotel room | 25 | . 3 Shared room | 12 | . Property Types by Neighbourhood . #Select properties listed more than 400 times listings_clean = listings[listings.property_type.isin([&#39;Entire apartment&#39;,&#39;Private room in apartment&#39;,&#39;Entire condominium&#39;,&#39;Entire house&#39;])] #Count number of listings in neighbourhoods by property type listings_byNeighbourhood = listings_clean.groupby([&#39;neighbourhood_cleansed&#39;,&#39;property_type&#39;]).neighbourhood_cleansed.count().to_frame(name = &#39;listings&#39;).reset_index() #Sum number of listings per neighbourhood listingsNeighbourhoodCount = listings_byNeighbourhood.groupby(&#39;neighbourhood_cleansed&#39;)[&#39;listings&#39;].sum().to_frame(name = &#39;total_listings&#39;).sort_values(by=&#39;total_listings&#39;, ascending=False).reset_index() #Calculate ratio of property types in the different neighbourhoods neighbourhoodPropertyRatio = listings_byNeighbourhood.merge(listingsNeighbourhoodCount, on=&#39;neighbourhood_cleansed&#39;) neighbourhoodPropertyRatio[&#39;ratio_of_property_type_in_neighbourhood&#39;] = neighbourhoodPropertyRatio[&#39;listings&#39;]/neighbourhoodPropertyRatio[&#39;total_listings&#39;]*100 neighbourhoodPropertyRatio.head(10) . neighbourhood_cleansed property_type listings total_listings ratio_of_property_type_in_neighbourhood . 0 Amager Vest | Entire apartment | 373 | 551 | 67.695100 | . 1 Amager Vest | Entire condominium | 37 | 551 | 6.715064 | . 2 Amager Vest | Entire house | 62 | 551 | 11.252269 | . 3 Amager Vest | Private room in apartment | 79 | 551 | 14.337568 | . 4 Amager st | Entire apartment | 301 | 466 | 64.592275 | . 5 Amager st | Entire condominium | 36 | 466 | 7.725322 | . 6 Amager st | Entire house | 59 | 466 | 12.660944 | . 7 Amager st | Private room in apartment | 70 | 466 | 15.021459 | . 8 Bispebjerg | Entire apartment | 168 | 246 | 68.292683 | . 9 Bispebjerg | Entire condominium | 18 | 246 | 7.317073 | . Room Types by Neighbourhood . #Count number of listings in neighbourhoods by property type roomCount = listings.groupby([&#39;neighbourhood_cleansed&#39;,&#39;room_type&#39;]).neighbourhood_cleansed.count().to_frame(name = &#39;listings&#39;).reset_index() #Sum number of listings per neighbourhood roomNeighbourhoodCount = roomCount.groupby(&#39;neighbourhood_cleansed&#39;)[&#39;listings&#39;].sum().to_frame(name = &#39;total_listings&#39;).sort_values(by=&#39;total_listings&#39;, ascending=False).reset_index() #Calculate ratio of property types in the different neighbourhoods roomRatio = roomCount.merge(listingsNeighbourhoodCount, on=&#39;neighbourhood_cleansed&#39;) roomRatio[&#39;ratio_of_room_type_in_neighbourhood&#39;] = roomRatio[&#39;listings&#39;]/roomRatio[&#39;total_listings&#39;]*100 roomRatio.head(10) . neighbourhood_cleansed room_type listings total_listings ratio_of_room_type_in_neighbourhood . 0 Amager Vest | Entire home/apt | 529 | 551 | 96.007260 | . 1 Amager Vest | Hotel room | 1 | 551 | 0.181488 | . 2 Amager Vest | Private room | 108 | 551 | 19.600726 | . 3 Amager Vest | Shared room | 2 | 551 | 0.362976 | . 4 Amager st | Entire home/apt | 434 | 466 | 93.133047 | . 5 Amager st | Hotel room | 3 | 466 | 0.643777 | . 6 Amager st | Private room | 108 | 466 | 23.175966 | . 7 Amager st | Shared room | 1 | 466 | 0.214592 | . 8 Bispebjerg | Entire home/apt | 206 | 246 | 83.739837 | . 9 Bispebjerg | Private room | 55 | 246 | 22.357724 | . Accomodations by Neighbourhood . df = pd.DataFrame() df[&#39;avg_n_accommodations&#39;] =listings.groupby(&#39;neighbourhood_cleansed&#39;).accommodates.mean() df = df.reset_index() df . neighbourhood_cleansed avg_n_accommodations . 0 Amager Vest | 3.668750 | . 1 Amager st | 3.483516 | . 2 Bispebjerg | 3.249042 | . 3 Brnshj-Husum | 4.589552 | . 4 Frederiksberg | 3.470012 | . 5 Indre By | 3.816971 | . 6 Nrrebro | 3.102770 | . 7 Valby | 3.550562 | . 8 Vanlse | 3.872928 | . 9 Vesterbro-Kongens Enghave | 3.230967 | . 10 sterbro | 3.464607 | . Pricing by Neighbourhood . neighbourhoodPricing = listings.groupby(&#39;neighbourhood_cleansed&#39;).price.mean().to_frame().sort_values(by=&#39;price&#39;, ascending=False).reset_index() neighbourhoodPricing . neighbourhood_cleansed price . 0 Indre By | 1532.850631 | . 1 sterbro | 1039.018018 | . 2 Amager st | 1020.058608 | . 3 Vesterbro-Kongens Enghave | 1017.957228 | . 4 Frederiksberg | 1002.586291 | . 5 Amager Vest | 956.114063 | . 6 Nrrebro | 874.478999 | . 7 Brnshj-Husum | 809.671642 | . 8 Valby | 753.269663 | . 9 Vanlse | 752.756906 | . 10 Bispebjerg | 674.777778 | . #Calculate Average Price Per Person df[&#39;price&#39;] = neighbourhoodPricing.price df[&#39;price_perPerson&#39;] = df.price/df.avg_n_accommodations df . neighbourhood_cleansed avg_n_accommodations price price_ratio price_perPerson . 0 Amager Vest | 3.668750 | 1532.850631 | 417.812779 | 417.812779 | . 1 Amager st | 3.483516 | 1039.018018 | 298.267002 | 298.267002 | . 2 Bispebjerg | 3.249042 | 1020.058608 | 313.956718 | 313.956718 | . 3 Brnshj-Husum | 4.589552 | 1017.957228 | 221.798811 | 221.798811 | . 4 Frederiksberg | 3.470012 | 1002.586291 | 288.928748 | 288.928748 | . 5 Indre By | 3.816971 | 956.114063 | 250.490291 | 250.490291 | . 6 Nrrebro | 3.102770 | 874.478999 | 281.838134 | 281.838134 | . 7 Valby | 3.550562 | 809.671642 | 228.040431 | 228.040431 | . 8 Vanlse | 3.872928 | 753.269663 | 194.496161 | 194.496161 | . 9 Vesterbro-Kongens Enghave | 3.230967 | 752.756906 | 232.981949 | 232.981949 | . 10 sterbro | 3.464607 | 674.777778 | 194.763125 | 194.763125 | . Pricing by Property Type . PropertyPricing = listings.groupby(&#39;property_type&#39;).price.mean().to_frame().sort_values(by=&#39;price&#39;, ascending=False).reset_index() PropertyPricing.head(20) . property_type price . 0 Boat | 1839.714286 | . 1 Entire villa | 1800.774194 | . 2 Houseboat | 1636.083333 | . 3 Island | 1600.000000 | . 4 Private room | 1500.000000 | . 5 Entire loft | 1488.738636 | . 6 Entire townhouse | 1476.600000 | . 7 Entire serviced apartment | 1459.496732 | . 8 Entire house | 1371.062130 | . 9 Room in serviced apartment | 1235.400000 | . 10 Entire condominium | 1161.533981 | . 11 Private room in tiny house | 1123.500000 | . 12 Entire apartment | 1104.796330 | . 13 Entire cabin | 1022.000000 | . 14 Entire bungalow | 1009.666667 | . 15 Room in hotel | 921.333333 | . 16 Room in hostel | 894.529412 | . 17 Room in boutique hotel | 872.666667 | . 18 Hut | 850.000000 | . 19 Entire guest suite | 786.222222 | . Pricing by Room Type . roomPricing = listings.groupby(&#39;room_type&#39;).price.mean().to_frame().sort_values(by=&#39;price&#39;, ascending=False).reset_index() roomPricing.head(20) . room_type price . 0 Entire home/apt | 1151.074539 | . 1 Hotel room | 960.080000 | . 2 Shared room | 618.583333 | . 3 Private room | 584.256630 | . Visualizations . Maps . #Merge reviews and listings group_listingReviews = reviews.merge(listings, on=&#39;listing_id&#39;, how=&#39;inner&#39;) #Define mapbox API token and style mapbox_access_token = &#39;pk.eyJ1IjoiYWNodG9uMjExMSIsImEiOiJja2lyam5yemgyNTV0MnJsYmJ0NXdzNWRxIn0.rWJgur27hJnWoBt7Oq5LeQ&#39; px.set_mapbox_access_token(mapbox_access_token) plot_style = &#39;mapbox://styles/achton2111/ckirsv5df0aj01at4zp0d7f3w&#39; #Interactive Geospacial plot fig = px.scatter_mapbox(group_listingReviews, lat=&quot;latitude&quot;, lon=&quot;longitude&quot;, color=&quot;neighbourhood_cleansed&quot;, zoom=10, size=&#39;price&#39;, mapbox_style= plot_style, hover_name=&#39;listing_name&#39;, hover_data = {&#39;price&#39;, &#39;property_type&#39;, &#39;room_type&#39;, &#39;accommodates&#39;, &#39;beds&#39;, &#39;review_scores_rating&#39;}, opacity = 0.8, title = &#39;AirBnB Listing Locations. Coloured by Neighbourhood, Size by Price)&#39; ) fig.show() . . . WordClouds . Let&#39;s try to see if there are any visual differences between reviews in the different neighbourhoods . #Distinction between neighbourhoods norrebro = group_listingReviews[group_listingReviews.neighbourhood_cleansed == &#39;Nrrebro&#39;] indreby = group_listingReviews[group_listingReviews.neighbourhood_cleansed == &#39;Indre By&#39;] vesterbro_KgsEnghave = group_listingReviews[group_listingReviews.neighbourhood_cleansed == &#39;Vesterbro-Kongens Enghave&#39;] osterbro = group_listingReviews[group_listingReviews.neighbourhood_cleansed == &#39;sterbro&#39;] frederiksberg = group_listingReviews[group_listingReviews.neighbourhood_cleansed == &#39;Frederiksberg&#39;] amagerOst = group_listingReviews[group_listingReviews.neighbourhood_cleansed == &#39;Amager st&#39;] amagerVest = group_listingReviews[group_listingReviews.neighbourhood_cleansed == &#39;Amager Vest&#39;] valby = group_listingReviews[group_listingReviews.neighbourhood_cleansed == &#39;Valby&#39;] bispebjerg = group_listingReviews[group_listingReviews.neighbourhood_cleansed == &#39;Bispebjerg&#39;] vanlose = group_listingReviews[group_listingReviews.neighbourhood_cleansed == &#39;Vanlse&#39;] bronshojHusum = group_listingReviews[group_listingReviews.neighbourhood_cleansed == &#39;Brnshj-Husum&#39;] . Norrebro . # Iterating through the .csv data file for i in norrebro.review_text: i = str(i) separate = i.split() for j in range(len(separate)): separate[j] = separate[j].lower() comment_words += &quot; &quot;.join(separate)+&quot; &quot; # Creating the Word Cloud final_wordcloud = WordCloud(width = 3000, height = 2000, background_color =&#39;black&#39;, stopwords = STOPWORDS, min_font_size = 10).generate(comment_words) # Displaying the WordCloud plt.figure(facecolor = None) plt.imshow(final_wordcloud) plt.axis(&quot;off&quot;) plt.tight_layout(pad = 0) plt.show() . Indre By . # Iterating through the .csv data file for i in indreby.review_text: i = str(i) separate = i.split() for j in range(len(separate)): separate[j] = separate[j].lower() comment_words += &quot; &quot;.join(separate)+&quot; &quot; # Creating the Word Cloud final_wordcloud = WordCloud(width = 3000, height = 2000, background_color =&#39;black&#39;, stopwords = STOPWORDS, min_font_size = 10).generate(comment_words) # Displaying the WordCloud plt.figure(facecolor = None) plt.imshow(final_wordcloud) plt.axis(&quot;off&quot;) plt.tight_layout(pad = 0) plt.show() . Vesterbro - Kongens Enghave . # Iterating through the .csv data file for i in vesterbro_KgsEnghave.review_text: i = str(i) separate = i.split() for j in range(len(separate)): separate[j] = separate[j].lower() comment_words += &quot; &quot;.join(separate)+&quot; &quot; # Creating the Word Cloud final_wordcloud = WordCloud(width = 3000, height = 2000, background_color =&#39;black&#39;, stopwords = STOPWORDS, min_font_size = 10).generate(comment_words) # Displaying the WordCloud plt.figure(facecolor = None) plt.imshow(final_wordcloud) plt.axis(&quot;off&quot;) plt.tight_layout(pad = 0) plt.show() . &#216;sterbro . # Iterating through the .csv data file for i in osterbro.review_text: i = str(i) separate = i.split() for j in range(len(separate)): separate[j] = separate[j].lower() comment_words += &quot; &quot;.join(separate)+&quot; &quot; # Creating the Word Cloud final_wordcloud = WordCloud(width = 3000, height = 2000, background_color =&#39;black&#39;, stopwords = STOPWORDS, min_font_size = 10).generate(comment_words) # Displaying the WordCloud plt.figure(facecolor = None) plt.imshow(final_wordcloud) plt.axis(&quot;off&quot;) plt.tight_layout(pad = 0) plt.show() . Frederiksberg . # Iterating through the .csv data file for i in frederiksberg.review_text: i = str(i) separate = i.split() for j in range(len(separate)): separate[j] = separate[j].lower() comment_words += &quot; &quot;.join(separate)+&quot; &quot; # Creating the Word Cloud final_wordcloud = WordCloud(width = 3000, height = 2000, background_color =&#39;black&#39;, stopwords = STOPWORDS, min_font_size = 10).generate(comment_words) # Displaying the WordCloud plt.figure(facecolor = None) plt.imshow(final_wordcloud) plt.axis(&quot;off&quot;) plt.tight_layout(pad = 0) plt.show() . Amager &#216;st . # Iterating through the .csv data file for i in amagerOst.review_text: i = str(i) separate = i.split() for j in range(len(separate)): separate[j] = separate[j].lower() comment_words += &quot; &quot;.join(separate)+&quot; &quot; # Creating the Word Cloud final_wordcloud = WordCloud(width = 3000, height = 2000, background_color =&#39;black&#39;, stopwords = STOPWORDS, min_font_size = 10).generate(comment_words) # Displaying the WordCloud plt.figure(facecolor = None) plt.imshow(final_wordcloud) plt.axis(&quot;off&quot;) plt.tight_layout(pad = 0) plt.show() . Amager Vest . # Iterating through the .csv data file for i in amagerVest.review_text: i = str(i) separate = i.split() for j in range(len(separate)): separate[j] = separate[j].lower() comment_words += &quot; &quot;.join(separate)+&quot; &quot; # Creating the Word Cloud final_wordcloud = WordCloud(width = 3000, height = 2000, background_color =&#39;black&#39;, stopwords = STOPWORDS, min_font_size = 10).generate(comment_words) # Displaying the WordCloud plt.figure(facecolor = None) plt.imshow(final_wordcloud) plt.axis(&quot;off&quot;) plt.tight_layout(pad = 0) plt.show() . Valby . # Iterating through the .csv data file for i in valby.review_text: i = str(i) separate = i.split() for j in range(len(separate)): separate[j] = separate[j].lower() comment_words += &quot; &quot;.join(separate)+&quot; &quot; # Creating the Word Cloud final_wordcloud = WordCloud(width = 3000, height = 2000, background_color =&#39;black&#39;, stopwords = STOPWORDS, min_font_size = 10).generate(comment_words) # Displaying the WordCloud plt.figure(facecolor = None) plt.imshow(final_wordcloud) plt.axis(&quot;off&quot;) plt.tight_layout(pad = 0) plt.show() . Bispebjerg . # Iterating through the .csv data file for i in bispebjerg.review_text: i = str(i) separate = i.split() for j in range(len(separate)): separate[j] = separate[j].lower() comment_words += &quot; &quot;.join(separate)+&quot; &quot; # Creating the Word Cloud final_wordcloud = WordCloud(width = 3000, height = 2000, background_color =&#39;black&#39;, stopwords = STOPWORDS, min_font_size = 10).generate(comment_words) # Displaying the WordCloud plt.figure(facecolor = None) plt.imshow(final_wordcloud) plt.axis(&quot;off&quot;) plt.tight_layout(pad = 0) plt.show() . Vanl&#248;se . # Iterating through the .csv data file for i in vanlose.review_text: i = str(i) separate = i.split() for j in range(len(separate)): separate[j] = separate[j].lower() comment_words += &quot; &quot;.join(separate)+&quot; &quot; # Creating the Word Cloud final_wordcloud = WordCloud(width = 3000, height = 2000, background_color =&#39;black&#39;, stopwords = STOPWORDS, min_font_size = 10).generate(comment_words) # Displaying the WordCloud plt.figure(facecolor = None) plt.imshow(final_wordcloud) plt.axis(&quot;off&quot;) plt.tight_layout(pad = 0) plt.show() . Br&#248;nsh&#248;j - Husum . # Iterating through the .csv data file for i in bronshojHusum.review_text: i = str(i) separate = i.split() for j in range(len(separate)): separate[j] = separate[j].lower() comment_words += &quot; &quot;.join(separate)+&quot; &quot; # Creating the Word Cloud final_wordcloud = WordCloud(width = 3000, height = 2000, background_color =&#39;black&#39;, stopwords = STOPWORDS, min_font_size = 10).generate(comment_words) # Displaying the WordCloud plt.figure(facecolor = None) plt.imshow(final_wordcloud) plt.axis(&quot;off&quot;) plt.tight_layout(pad = 0) plt.show() . 4.0 RESULTS . 5.0 DISCUSSION . 6.0 CONCLUSION .",
            "url": "https://achnito.github.io/BDBI/exploratory%20data%20analysis/data%20visualization/wordcloud/airbnb/neighbourhoods%20in%20copenhagen/accommodation%20pricing/2020/12/17/AirBnb-(1).html",
            "relUrl": "/exploratory%20data%20analysis/data%20visualization/wordcloud/airbnb/neighbourhoods%20in%20copenhagen/accommodation%20pricing/2020/12/17/AirBnb-(1).html",
            "date": " • Dec 17, 2020"
        }
        
    
  
    
        ,"post3": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://achnito.github.io/BDBI/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post4": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://achnito.github.io/BDBI/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://achnito.github.io/BDBI/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://achnito.github.io/BDBI/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}